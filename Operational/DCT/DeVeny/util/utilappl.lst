Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 1



1                               COMMENT *
2      
3                        This file is used to generate DSP code for the utility board. It will time
4                             the exposure, operate the shutter, control the CCD temperature and
5                             turn the analog power on. This is Rev. 3.00 software.
6                        Modified 1-12-97 for 10 MHz input clock frequency by adding 2 to elapsed
7                             exposure time rather than one.
8                        Power ON sequence written for Gen II power control board, Rev. 4A
9      
10                       Modified for a second order temperture metaregulation Oct 2010
11     
12                       Modified for more configurable Makefile as described in the confluence page
13                        http://jumar.lowell.edu/confluence/display/LIGS/DSP+Code+Upgrades+And+Repository+Restructuring
14                       Version 1.4/1
15     
16                       -d HOST 'HOST'  To generate code for downloading to DSP memory.
17                       -d HOST 'ROM'   To generate code for writing to the ROM.
18     
19                               *
20                                 PAGE    132                               ; Printronix page width - 132 columns
21                                                                           ;INCLUDE        "utilversion.s" ; versioning
22                                 INCLUDE "infospec.s"
23                       ; General DSP info field specifications.
24                       ; These values are 'addresses' and used as the argument for the INF command.
25     
26                       GET_VERSION
27        000000                   EQU     0                                 ; IVERSION field
28        000001         GET_FLAVOR EQU    1                                 ; IFLAVOR field
29        000002         GET_TIME0 EQU     2                                 ; ITIME0 field (lo order, time of compile)
30        000003         GET_TIME1 EQU     3                                 ; ITIME1 field (hi order, time of compile)
31        000004         GET_SVNREV EQU    4                                 ; ISVNREV field (highest svn rev if available)
32     
33                                 INCLUDE "utilinfospec.s"
34                       ; UTIL DSP info field specifications.
35                       ; These values are 'addresses' and used as the argument for the INF command.
36     
37                       GET_CAPABLE
38        000100                   EQU     $100                              ; ICAPABLE field (what dsp supports).
39     
40                                 INCLUDE "utilinfo.s"
41                       ; DSP Version
42        04407F         IVERSION  EQU     278655                            ; 1.4/1
43     
44        202020         IFLAVOR   EQU     '   '                             ; none
45     
46        00E00A         ITIME0    EQU     57354                             ; lo order time: 2014 5 15  15:40:58 GMT
47     
48        005374         ITIME1    EQU     21364                             ; hi order time: 2014 5 15  15:40:58 GMT
49     
50        000000         ISVNREV   EQU     0                                 ; most recent code svn rev
51     
52                                 INCLUDE "utilversion.s"
53        000000         VERSION   EQU     0
54                       UTILCAPABLE
55        000000                   EQU     0
56     
57                       ; Name it a section so it doesn't conflict with other application programs
58                                 SECTION UTILAPPL
59     
60                       ;  These are also defined in "utilboot.asm", so be sure they agree
61        000090         APL_ADR   EQU     $90                               ; Starting address of application program
62        000080         BUF_STR   EQU     $80                               ; Starting address of buffers in X:
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 2



63        000020         BUF_LEN   EQU     $20                               ; Length of buffers
64        000080         SSI_BUF   EQU     BUF_STR                           ; Starting address of SCI buffer in X:
65        0000A0         COM_BUF   EQU     SSI_BUF+BUF_LEN                   ; Starting address of command buffer in X:
66        0000C0         COM_TBL   EQU     COM_BUF+BUF_LEN                   ; Starting address of command table in X:
67     
68                       ;  Define some useful constants
69        001EE0         APL_XY    EQU     $1EE0                             ; Starting address in EEPROM of X: and Y: values
70        000046         DLY_MUX   EQU     70                                ; Number of DSP cycles to delay for MUX settling
71        000064         DLY_AD    EQU     100                               ; Number of DSP cycles to delay for A/D settling
72     
73                       ; Assign addresses to port B data register
74        00FFE4         PBD       EQU     $FFE4                             ; Port B Data Register
75        00FFFF         IPR       EQU     $FFFF                             ; Interrupt Priority Register
76     
77                       ;  Addresses of memory mapped components in Y: data memory space
78                       ;  Write addresses first
79        00FFF0         WR_DIG    EQU     $FFF0                             ; was $FFFF  Write Digital output values D00-D15
80        00FFF1         WR_MUX    EQU     $FFF1                             ; Select MUX connected to A/D input - one of 16
81        00FFF2         EN_DIG    EQU     $FFF2                             ; Enable digital outputs
82        00FFF7         WR_DAC3   EQU     $FFF7                             ; Write to DAC#3 D00-D11
83        00FFF6         WR_DAC2   EQU     $FFF6                             ; Write to DAC#2 D00-D11
84        00FFF5         WR_DAC1   EQU     $FFF5                             ; Write to DAC#1 D00-D11
85        00FFF4         WR_DAC0   EQU     $FFF4                             ; Write to DAC#0 D00-D11
86                       ;WR_DAC0        EQU     $FFF6           ; Redirect Heater DAC
87                       ;WR_DAC1        EQU     $FFF7           ; Redirect Heater DAC
88     
89                       ;  Read addresses next
90        00FFF0         RD_DIG    EQU     $FFF0                             ; Read Digital input values D00-D15
91        00FFF1         STR_ADC   EQU     $FFF1                             ; Start ADC conversion, ignore data
92        00FFF2         RD_ADC    EQU     $FFF2                             ; Read A/D converter value D00-D11
93        00FFF7         WATCH     EQU     $FFF7                             ; Watch dog timer - tell it that DSP is alive
94     
95                       ;  Bit definitions of STATUS word
96        000000         ST_SRVC   EQU     0                                 ; Set if ADC routine needs executing
97        000001         ST_EX     EQU     1                                 ; Set if timed exposure is in progress
98        000002         ST_SH     EQU     2                                 ; Set if shutter is open
99        000003         ST_READ   EQU     3                                 ; Set if a readout needs to be initiated
100       000004         STRT_EX   EQU     4                                 ; Set to indicate start of exposure
101       000007         DITHMODE  EQU     7                                 ; Set for dithering during exp.  Bash to set
102       000008         CONT_EX   EQU     8                                 ; Set to indicate cont. exp mode. Bash to set
103    
104                      ; Bit definitions of software OPTIONS word
105       000000         OPT_SH    EQU     0                                 ; Set to open and close shutter.  Bash to set
106    
107                      ;  Bit definitions of Port B = Host Processor Interface
108       000000         PWR_EN1   EQU     0                                 ; Power enable bit ONE - Output
109       000001         PWR_EN0   EQU     1                                 ; Power enable bit ZERO  - Output
110       000002         PWRST     EQU     2                                 ; Reset power conditioner counter - Output
111       000003         SHUTTER   EQU     3                                 ; Control shutter - Output
112       000004         IRQ_T     EQU     4                                 ; Request interrupt service from timing board - Output
113       000005         SYS_RST   EQU     5                                 ; Reset entire system - Output
114       000008         WATCH_T   EQU     8                                 ; Processed watchdog signal from timing board - Input
115    
116    
117                      ;   Definitions for outer working temps loop.
118                                IF      @SCP("64","32")
121                                ENDIF
122                                IF      @SCP("64","64")
123       000040         TAVCNT    EQU     64
124       000006         TAVSHF    EQU     6                                 ; must match log2(64)
125                                ENDIF
126                                IF      @SCP("64","128")
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 3



129                                ENDIF
130    
131                      ; set up utility board capabilities word
132                                IF      @SCP("OFF","ON")                  ;bit 0 (1)
134                                ELSE
135                      EXPOSECAPABLE
136       000000                   EQU     0
137                                ENDIF
138                                IF      @SCP("OFF","ON")                  ;bit 1 (1)
140                                ELSE
141       000000         PWRCAPABLE EQU    0
142                                ENDIF
143                                IF      @SCP("ON","ON")                   ;bit 2 (1)
144                      TEMPREGCAPABLE
145       000004                   EQU     4
146                                ELSE
148                                ENDIF
149                                IF      @SCP("ON","ON")                   ;bit 3 (1)
150                      WDACCAPABLE
151       000008                   EQU     8
152                                ELSE
154                                ENDIF
155                                IF      @SCP("OFF","ON")                  ;bit 4 (1)
157                                ELSE
158                      WDACALLCAPABLE
159       000000                   EQU     0
160                                ENDIF
161                      UTILCAPABLE
162       00000C                   EQU     EXPOSECAPABLE+PWRCAPABLE+TEMPREGCAPABLE+WDACCAPABLE+WDACALLCAPABLE
163    
164    
165    
166    
167                      ;**************************************************************************
168                      ;                                                                         *
169                      ;    Register assignments                                                 *
170                      ;        R1 - Address of SCI receiver contents                            *
171                      ;        R2 - Address of processed SCI receiver contents                  *
172                      ;        R3 - Pointer to current top of command buffer                    *
173                      ;        R4 - Pointer to processed contents of command buffer             *
174                      ;        N4 - Address for internal jumps after receiving 'DON' replies    *
175                      ;        R0, R5, R6, A, X0, X1 - For use by program only                  *
176                      ;        R7 - For use by SCI ISR only                                     *
177                      ;        Y0, Y1, and B - For use by timer ISR only. If any of these       *
178                      ;               registers are needed elsewhere they must be saved and     *
179                      ;               restored in the TIMER ISR.                                *
180                      ;**************************************************************************
181    
182                      ; Specify execution and load addresses.
183       P:0090 P:0090                   ORG     P:APL_ADR,P:APL_ADR
184    
185                             ; The TIMER addresses must be defined here and SERVICE must follow to match
186                             ;   up with the utilboot code
187       P:0090 P:0090 0C00A0            JMP     <SERVICE                          ; Millisecond timer interrupt
188    
189       P:0091 P:0091 000004  TIMER     RTI                                       ; RTI for now so downloading works
190       P:0092 P:0092 0A0160            BSET    #0,Y:<DIG_OUT                     ; FIDUCIAL PULSE
191       P:0093 P:0093 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
192       P:0095 P:0095 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
193    
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 4



194                                       IF      @SCP("OFF","ON")
239                                       ENDIF
240    
241                             ; Return from interrupt
242                             NO_TIM
243       P:0097 P:0097 0A0020            BSET    #ST_SRVC,X:<STATUS                ; SERVICE needs executing
244       P:0098 P:0098 0A0140            BCLR    #0,Y:<DIG_OUT                     ; FIDUCIAL PULSE
245       P:0099 P:0099 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
246       P:009B P:009B 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
247       P:009D P:009D 05B679            MOVEC                         Y:<SV_SR,SR ; Restore Status Register
248       P:009E P:009E 000000            NOP
249       P:009F P:009F 000004            RTI                                       ; Return from TIMER interrupt
250    
251                             ; This long subroutine is executed every millisecond, but isn't an ISR so
252                             ;   that care need not be taken to preserve registers and stacks.
253                             SERVICE
254       P:00A0 P:00A0 0A0000            BCLR    #ST_SRVC,X:<STATUS                ; Clear request to execute SERVICE
255    
256                                       IF      @SCP("OFF","ON")
258                                       ENDIF
259    
260                             ; Extra call if using the VME interface board
261                                       IF      @SCP("INTERFACE","VME")
266                                       ENDIF
267    
268                                       IF      @SCP("OFF","ON")
287                                       ENDIF
288    
289                             ; Update all the digital input/outputs; reset watchdog timer
290       P:00A1 P:00A1 0970F0  UPD_DIG   MOVEP             Y:RD_DIG,Y:DIG_IN       ; Read 16 digital inputs
                        000000
291       P:00A3 P:00A3 0A0161            BSET    #1,Y:<DIG_OUT                     ; FIDUCIAL PULSE
292       P:00A4 P:00A4 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
293       P:00A6 P:00A6 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
294       P:00A8 P:00A8 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
295                             ; Update the 4 DACs
296       P:00A9 P:00A9 09F0F4            MOVEP             Y:DAC0,Y:WR_DAC0        ; Write to DAC0
                        000002
297       P:00AB P:00AB 09F0F5            MOVEP             Y:DAC1,Y:WR_DAC1        ; Write to DAC1
                        000003
298       P:00AD P:00AD 09F0F6            MOVEP             Y:DAC2,Y:WR_DAC2        ; Write to DAC2
                        000004
299       P:00AF P:00AF 09F0F7            MOVEP             Y:DAC3,Y:WR_DAC3        ; Write to DAC3
                        000005
300    
301                             ; Analog Input processor - read the 16 A/D inputs
302       P:00B1 P:00B1 448000            MOVE              X:<ONE,X0               ; For incrementing accumulator to select MUX
303       P:00B2 P:00B2 350713            CLR     A         #<AD_IN,R5              ; Will contain MUX number
304       P:00B3 P:00B3 060640            DO      Y:NUM_AD,LOOP_AD                  ; Loop over each A/D converter input
                        0000C2
305       P:00B5 P:00B5 09CE31            MOVEP             A,Y:WR_MUX              ; Select MUX input
306       P:00B6 P:00B6 064680            DO      #DLY_MUX,L_AD1                    ; Wait for the MUX to settle
                        0000B8
307       P:00B8 P:00B8 5C3500            MOVE                          A1,Y:<SV_A1 ; DO needed so SSI input can come in
308                             L_AD1
309       P:00B9 P:00B9 094531            MOVEP             Y:STR_ADC,X1            ; Start A/D conversion - dummy read
310       P:00BA P:00BA 066480            DO      #DLY_AD,L_AD2                     ; Wait for the A/D to settle
                        0000BC
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 5



311       P:00BC P:00BC 458000            MOVE              X:<CFFF,X1
312                             L_AD2
313       P:00BD P:00BD 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
314       P:00BE P:00BE 200066            AND     X1,A                              ; A/D is only valid to 12 bits
315       P:00BF P:00BF 0BCC4B            BCHG    #11,A1                            ; Change 12-bit 2's complement to unipolar
316       P:00C0 P:00C0 5C5D00            MOVE                          A1,Y:(R5)+  ; Put the A/D value in the table
317       P:00C1 P:00C1 5CB500            MOVE                          Y:<SV_A1,A1 ; Restore A1 = MUX number
318       P:00C2 P:00C2 200040            ADD     X0,A                              ; Increment A = MUX number by one
319                             LOOP_AD
320       P:00C3 P:00C3 09F0B1            MOVEP             X:ONE,Y:WR_MUX          ; Sample +5V when idle
                        000000
321    
322                                       IF      @SCP("ON","ON")
323    
324                             ; Control the CCD Temperature
325                             ; The algorithmn assumes a reverse biased diode whose A/D count A_CCDT
326                             ;   is proportional to temperature. Don't start controlling temperature
327                             ;   until it falls below target temperature. ADUs decrease with temp.
328    
329                             ; Changed to run an RTD where the ADUs increase with temperature.
330                             ; Modified to average a bunch of temps, then change the heater current
331                             ; For initialization, depend on assembler setting to zero.
332                             ; this loop also averages the cold head temperature, for informational
333                             ; purposes. The count for this loop currently fixed at 1024.
334                             ;
335    
336       P:00C5 P:00C5 4C8D00            MOVE                          Y:<B_CCDT,X0 ; Get Cold Head temperature
337       P:00C6 P:00C6 58F000            MOVE                          Y:TH_SUM,A0 ; Get CH running Sum
                        000042
338       P:00C8 P:00C8 548000            MOVE              X:<ZERO,A1
339       P:00C9 P:00C9 218500            MOVE              A1,X1
340       P:00CA P:00CA 200020            ADD     X,A                               ; Add CH to running sum
341       P:00CB P:00CB 587000            MOVE                          A0,Y:TH_SUM ; and store it
                        000042
342       P:00CD P:00CD 58F000            MOVE                          Y:TH_COUNT,A0 ; Get the count
                        000041
343       P:00CF P:00CF 000008            INC     A                                 ; Add 1
344       P:00D0 P:00D0 587000            MOVE                          A0,Y:TH_COUNT ; and store it
                        000041
345       P:00D2 P:00D2 4CF000            MOVE                          Y:ONE_K,X0  ; Get number to average
                        000044
346       P:00D4 P:00D4 200024            SUB     X,A
347       P:00D5 P:00D5 0E90E1            JLT     <C_TEMP
348                             ; If TH_COUNT .GE. 1024, find avg, update
349       P:00D6 P:00D6 58F000            MOVE                          Y:TH_SUM,A0 ; Here if done.  Get final sum
                        000042
350       P:00D8 P:00D8 060AA0            REP     #10
351       P:00D9 P:00D9 200022            ASR     A                                 ; Averaging the temperature
352       P:00DA P:00DA 587000            MOVE                          A0,Y:TH_AVG ; Save the average temperature
                        000043
353    
354       P:00DC P:00DC 200013            CLR     A                                 ; Now clear sum and count
355       P:00DD P:00DD 587000            MOVE                          A0,Y:TH_SUM
                        000042
356       P:00DF P:00DF 587000            MOVE                          A0,Y:TH_COUNT
                        000041
357    
358                             ; This is section handles the CCD detector temperature. It reads the temp then
359                             ; averages and applies the heater current if necessary
360                             C_TEMP
361       P:00E1 P:00E1 4C8C00            MOVE                          Y:<A_CCDT,X0 ; Get actual CCD temperature
362       P:00E2 P:00E2 58BF00            MOVE                          Y:<T_SUM,A0 ; Get the running sum
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 6



363       P:00E3 P:00E3 548000            MOVE              X:<ZERO,A1
364       P:00E4 P:00E4 218500            MOVE              A1,X1
365       P:00E5 P:00E5 200020            ADD     X,A                               ; add on this temperature
366       P:00E6 P:00E6 583F00            MOVE                          A0,Y:<T_SUM ; and store it
367    
368                                       IF      @SCP("OFF","ON")
375                                       ENDIF
376    
377       P:00E7 P:00E7 58BE00            MOVE                          Y:<T_COUNT,A0 ; Get the count
378       P:00E8 P:00E8 20AC00            MOVE              X1,A1
379    
380                                       IF      @SCP("OFF","ON")
383                                       ENDIF
384       P:00E9 P:00E9 000008            INC     A                                 ; Add 1
385       P:00EA P:00EA 583E00            MOVE                          A0,Y:<T_COUNT ; and store it
386       P:00EB P:00EB 4CF000            MOVE                          Y:ONE_K,X0  ; Get number to average
                        000044
387       P:00ED P:00ED 200024            SUB     X,A
388       P:00EE P:00EE 0E9140            JLT     <SKIP_T
389                             ; If T_COUNT .GE. 1024, find avg, update
390       P:00EF P:00EF 58BF00            MOVE                          Y:<T_SUM,A0 ; Here if done.  Get final sum
391       P:00F0 P:00F0 000000            NOP
392                                       IF      @SCP("OFF","ON")
394                                       ENDIF
395       P:00F1 P:00F1 060AA0            REP     #10
396       P:00F2 P:00F2 200022            ASR     A                                 ; Averaging the temperature
397       P:00F3 P:00F3 587000            MOVE                          A0,Y:T_AVG  ; Save the average temperature
                        000040
398       P:00F5 P:00F5 210400            MOVE              A0,X0                   ; and stick in X0
399    
400                                       IF      @SCP("OFF","ON")
405                                       ENDIF
406    
407       P:00F6 P:00F6 200013            CLR     A                                 ; Now clear sum and count
408       P:00F7 P:00F7 583F00            MOVE                          A0,Y:<T_SUM
409                                       IF      @SCP("OFF","ON")
412                                       ENDIF
413       P:00F8 P:00F8 583E00            MOVE                          A0,Y:<T_COUNT
414       P:00F9 P:00F9 5EF000            MOVE                          Y:W_CCDT,A  ; Get target CCD temperature
                        00004B
415       P:00FB P:00FB 200044            SUB     X0,A
416       P:00FC P:00FC 21C400            MOVE              A,X0                    ; X0 now target - actual
417       P:00FD P:00FD 4D9D00            MOVE                          Y:<T_COEFF,X1
418       P:00FE P:00FE 2000A0            MPY     X0,X1,A                           ; A = (target - actual) * T_COEFF
419       P:00FF P:00FF 200022            ASR     A                                 ; Shift right to fix *2
420       P:0100 P:0100 4CB400            MOVE                          Y:<HTMAX,X0 ; Heats greater than this are not allowed
421       P:0101 P:0101 210C00            MOVE              A0,A1                   ;
422       P:0102 P:0102 200045            CMP     X0,A
423       P:0103 P:0103 0E9106            JLT     <TST_LOW
424       P:0104 P:0104 208E00            MOVE              X0,A                    ; Make it the maximum heat
425       P:0105 P:0105 0C0109            JMP     <WR_DAC
426                             TST_LOW
427       P:0106 P:0106 200003            TST     A                                 ; Heats of less than zero are not allowed
428       P:0107 P:0107 0E7109            JGT     <WR_DAC
429       P:0108 P:0108 568000            MOVE              X:<ZERO,A               ; No heat
430                             WR_DAC
431       P:0109 P:0109 09CC34            MOVEP             A1,Y:WR_DAC0            ; Update DAC and record of it
432       P:010A P:010A 5C0200            MOVE                          A1,Y:<DAC0
433       P:010B P:010B 5C1E00            MOVE                          A1,Y:<DAC0_LS
434    
435                                       IF      @SCP("ON","ON")
436    
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 7



437                             ;       code to manage new 'working' detector setpoint temperature
438       P:010C P:010C 4CF000            MOVE                          Y:T_AVG,X0  ; outermost 2 minute loop- sum average actual
                        000040
439       P:010E P:010E 5EF000            MOVE                          Y:TAV_SUM,A
                        00004C
440       P:0110 P:0110 200040            ADD     X0,A
441       P:0111 P:0111 5C7000            MOVE                          A1,Y:TAV_SUM ; update sum, actual ccd temp
                        00004C
442       P:0113 P:0113 5FF000            MOVE                          Y:W_COUNT,B
                        00004D
443       P:0115 P:0115 448000            MOVE              X:<ONE,X0
444       P:0116 P:0116 200048            ADD     X0,B
445       P:0117 P:0117 5D7000            MOVE                          B1,Y:W_COUNT
                        00004D
446       P:0119 P:0119 4CF000            MOVE                          Y:TAVLOOP,X0
                        000053
447       P:011B P:011B 20004C            SUB     X0,B
448       P:011C P:011C 0AF0A9            JLT     SKIP_T
                        000140
449                                                                                 ; convert TAV_SUM in A to average by right shift
450       P:011E P:011E 0606A0            REP     #TAVSHF
451       P:011F P:011F 200022            ASR     A                                 ; ROUND?
452       P:0120 P:0120 4C9C00            MOVE                          Y:<T_CCDT,X0
453       P:0121 P:0121 200044            SUB     X0,A                              ; actual regulated - target
454       P:0122 P:0122 200036            NEG     A
455       P:0123 P:0123 200022            ASR     A                                 ; DeltaT*0.5 in A
456       P:0124 P:0124 4EF000            MOVE                          Y:W_CCDT,Y0
                        00004B
457       P:0126 P:0126 200050            ADD     Y0,A                              ; add correction to W_CCDT
458       P:0127 P:0127 218700            MOVE              A1,Y1
459       P:0128 P:0128 200044            SUB     X0,A                              ; W_CCDT proposed - target
460       P:0129 P:0129 4DF000            MOVE                          Y:MBOUND,X1 ; apply bound
                        000054
461       P:012B P:012B 200065            CMP     X1,A
462       P:012C P:012C 0AF0A9            JLT     INRANGEHI
                        000133
463                                                                                 ; out of bounds above-  make W_CCDT = T_CDDT + 3
6
464       P:012E P:012E 208E00            MOVE              X0,A
465       P:012F P:012F 200060            ADD     X1,A
466       P:0130 P:0130 218700            MOVE              A1,Y1
467       P:0131 P:0131 0AF080            JMP     SET_W_CCDT
                        000139
468                             INRANGEHI
469                                                                                 ; set if W_CCDT proposed is too low
470       P:0133 P:0133 200060            ADD     X1,A
471       P:0134 P:0134 0AF0A7            JGT     SET_W_CCDT
                        000139
472                                                                                 ; out of bounds below-  make W_CCDT = T_CDDT - 3
6
473       P:0136 P:0136 208E00            MOVE              X0,A
474       P:0137 P:0137 200064            SUB     X1,A
475       P:0138 P:0138 218700            MOVE              A1,Y1
476                             SET_W_CCDT
477       P:0139 P:0139 4F7000            MOVE                          Y1,Y:W_CCDT
                        00004B
478       P:013B P:013B 200013            CLR     A
479       P:013C P:013C 5C7000            MOVE                          A1,Y:W_COUNT
                        00004D
480       P:013E P:013E 5C7000            MOVE                          A1,Y:TAV_SUM
                        00004C
481                                       ENDIF
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 8



482    
483                                       ENDIF
484    
485                             SKIP_T
486       P:0140 P:0140 0A0141            BCLR    #1,Y:<DIG_OUT                     ; FIDUCIAL PULSE
487       P:0141 P:0141 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
488       P:0143 P:0143 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
489       P:0145 P:0145 00000C            RTS                                       ; Return from subroutine SERVICE call
490    
491                                       IF      @SCP("OFF","ON")
502                                       ENDIF
503    
504                             ; These are called directly by command, so need to call subroutines in turn
505                             ; the labels will be removed shortly after we fix the cmd table.
506                             OPEN
507                                       IF      @SCP("OFF","ON")
512                                       ENDIF
513                             ; the labels will be removed shortly after we fix the cmd table.
514                             CLOSE
515                                       IF      @SCP("OFF","ON")
518                                       ENDIF
519    
520       P:0146 P:0146 0C0000            JMP     <FINISH                           ; Send 'DON' reply
521    
522    
523                             ;       Process INF according to the single addressing parameter
524                             ;       We'll shortly add a capability bit for working setpt temp regulation.
525                             GET_INFO
526       P:0147 P:0147 56DC00            MOVE              X:(R4)+,A               ; 0-4 is generic, >= 0x100 tim specific
527       P:0148 P:0148 44F400            MOVE              #IVERSION,X0
                        04407F
528       P:014A P:014A 46F400            MOVE              #>GET_VERSION,Y0
                        000000
529       P:014C P:014C 200055            CMP     Y0,A
530       P:014D P:014D 0EA000            JEQ     <FINISH1
531       P:014E P:014E 44F400            MOVE              #IFLAVOR,X0
                        202020
532       P:0150 P:0150 46F400            MOVE              #>GET_FLAVOR,Y0
                        000001
533       P:0152 P:0152 200055            CMP     Y0,A
534       P:0153 P:0153 0EA000            JEQ     <FINISH1
535       P:0154 P:0154 44F400            MOVE              #ITIME0,X0
                        00E00A
536       P:0156 P:0156 46F400            MOVE              #>GET_TIME0,Y0
                        000002
537       P:0158 P:0158 200055            CMP     Y0,A
538       P:0159 P:0159 0EA000            JEQ     <FINISH1                          ; Is it Time0?
539       P:015A P:015A 44F400            MOVE              #ITIME1,X0
                        005374
540       P:015C P:015C 46F400            MOVE              #>GET_TIME1,Y0
                        000003
541       P:015E P:015E 200055            CMP     Y0,A
542       P:015F P:015F 0EA000            JEQ     <FINISH1                          ; Is it Time1?
543       P:0160 P:0160 240000            MOVE              #ISVNREV,X0
544       P:0161 P:0161 46F400            MOVE              #>GET_SVNREV,Y0
                        000004
545       P:0163 P:0163 200055            CMP     Y0,A
546       P:0164 P:0164 0EA000            JEQ     <FINISH1                          ; Is it Svn rev?
547       P:0165 P:0165 240C00            MOVE              #UTILCAPABLE,X0
548       P:0166 P:0166 46F400            MOVE              #>GET_CAPABLE,Y0
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 9



                        000100
549       P:0168 P:0168 200055            CMP     Y0,A
550       P:0169 P:0169 0EA000            JEQ     <FINISH1                          ; Is it UTIL Capabilities?
551       P:016A P:016A 0C0000            JMP     <ERROR
552    
553                             ;  **************  BEGIN  COMMAND  PROCESSING  ***************
554                                       IF      @SCP("OFF","ON")
713                                       ENDIF
714    
715                                       IF      @SCP("ON","ON")
716    
717                                       IF      @SCP("OFF","ON")
733                                       ENDIF
734    
735    
736                             WRITE_TO_DAC2
737       P:016B P:016B 56DC00            MOVE              X:(R4)+,A               ; DAC Number to change
738       P:016C P:016C 09CC36            MOVEP             A1,Y:WR_DAC2            ; Update DAC and record of it
739       P:016D P:016D 5C0400            MOVE                          A1,Y:<DAC2
740       P:016E P:016E 0C0000            JMP     <FINISH
741                             WRITE_TO_DAC3
742       P:016F P:016F 56DC00            MOVE              X:(R4)+,A               ; Value to set
743       P:0170 P:0170 09CC37            MOVEP             A1,Y:WR_DAC3            ; Update DAC and record of it
744       P:0171 P:0171 5C0500            MOVE                          A1,Y:<DAC3
745       P:0172 P:0172 0C0000            JMP     <FINISH
746                                       ENDIF
747    
748    
749                                       IF      @SCP("OFF","ON")
769                                       ENDIF
770    
771                                       IF      @SCP("OFF","ON")
777                                       ENDIF
778    
779    
780                                       IF      @SCP("OFF","ON")
786                                       ENDIF
787    
788    
789                                       IF      @SCP("OFF","ON")
800                                       ENDIF
801    
802                             ; A 'DON' reply has been received in response to a command issued by
803                             ;    the Utility board. Read the X:STATUS bits in responding to it.
804    
805                             ; Test if an internal program jump is needed after receiving a 'DON' reply
806       P:0173 P:0173 239000  PR_DONE   MOVE              N4,R0                   ; Get internal jump address
807       P:0174 P:0174 3C0000            MOVE              #<START,N4              ; Set internal jump address to default
808       P:0175 P:0175 0AE080            JMP     (R0)                              ; Jump to the internal jump address
809    
810                             ; Check for program overflow
811                                       IF      @CVS(N,*)>$200
813                                       ENDIF                                     ;  will not overflow
814    
815    
816    
817                             ; Command table resident in X: data memory
818                             ;  The last part of the command table is not defined for "bootrom"
819                             ;     because it contains application-specific commands
820    
821                             ;  The commands tbl has been modified so they are keyed to OFF and POWER
822    
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 10



823                                       IF      @SCP("HOST","HOST")
824       X:00C0 X:00C0                   ORG     X:COM_TBL,X:COM_TBL
825                                       ELSE                                      ; Memory offsets for generating EEPROMs
827                                       ENDIF
828    
829                                       IF      @SCP("OFF","ON")
832                                       ELSE
833       X:00C0 X:00C0                   DC      0,START,0,START
834                                       ENDIF
835    
836                                       IF      @SCP("OFF","ON")
843                                       ELSE
844       X:00C4 X:00C4                   DC      0,START,0,START
845       X:00C8 X:00C8                   DC      0,START,0,START
846       X:00CC X:00CC                   DC      0,START,0,START
847                                       ENDIF
848    
849       X:00D0 X:00D0                   DC      'DON',PR_DONE                     ; Process DON reply
850    
851    
852                                       IF      @SCP("ON","ON")
853       X:00D2 X:00D2                   DC      'WD2',WRITE_TO_DAC2               ;  Write a value to the DAC
854       X:00D4 X:00D4                   DC      'WD3',WRITE_TO_DAC3               ;
855    
856                                       IF      @SCP("OFF","ON")
858                                       ELSE
859       X:00D6 X:00D6                   DC      0,START
860                                       ENDIF
861    
862                                       ELSE
865                                       ENDIF
866    
867       X:00D8 X:00D8                   DC      'INF',GET_INFO                    ; Info/version command
868    
869       X:00DA X:00DA                   DC      0,START
870       X:00DC X:00DC                   DC      0,START,0,START
871    
872                             ; Y: parameter table definitions, containing no "bootrom" definitions
873                                       IF      @SCP("HOST","HOST")
874       Y:0000 Y:0000                   ORG     Y:0,Y:0                           ; Download address
875                                       ELSE
877                                       ENDIF
878       Y:0000 Y:0000         DIG_IN    DC      0                                 ; Values of 16 digital input lines
879       Y:0001 Y:0001         DIG_OUT   DC      0                                 ; Values of 16 digital output lines
880                             ;DAC0    DC      0       ; Table of four DAC values to be output
881                             ;DAC1    DC      1000
882       Y:0002 Y:0002         DAC0      DC      0000                              ; Table of four DAC values to be output
883       Y:0003 Y:0003         DAC1      DC      0000
884       Y:0004 Y:0004         DAC2      DC      2048
885       Y:0005 Y:0005         DAC3      DC      2048
886       Y:0006 Y:0006         NUM_AD    DC      16                                ; Number of inputs to A/D converter
887       Y:0007 Y:0007         AD_IN     DC      0,0,0,0,0,0,0,0
888       Y:000F Y:000F                   DC      0,0,0,0,0,0,0,0                   ; Table of 16 A/D values
889                              EL_TIM_MSECONDS
890       Y:0017 Y:0017                   DC      0                                 ; Number of milliseconds elapsed
891       Y:0018 Y:0018         TGT_TIM   DC      6000                              ; Number of milliseconds desired in exposure
892       Y:0019 Y:0019         U_CCDT    DC      $C20                              ; Upper range of CCD temperature control loop
893       Y:001A Y:001A         L_CCDT    DC      $C50                              ; Lower range of CCD temperature control loop
894       Y:001B Y:001B         K_CCDT    DC      85                                ; Constant of proportionality for CCDT control
895       00000C                A_CCDT    EQU     AD_IN+5                           ; Address of CCD temperature in A/D table
896       00000D                B_CCDT    EQU     AD_IN+6                           ; Address of Cold Head temperature in A/D table
897       Y:001C Y:001C         T_CCDT    DC      $C00                              ; Target CCD T for small increment algorithmn
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 11



898       Y:001D Y:001D         T_COEFF   DC      $70                               ; Coefficient for difference in temperatures
899       Y:001E Y:001E         DAC0_LS   DC      0                                 ; Least significant part of heater voltage
900    
901                             ; Define power supply turn-on variables
902                                       IF      @SCP("POWER","R6")
904                                       ELSE
905       Y:001F Y:001F         T_HV      DC      $4D0                              ; Target HV supply voltage for Rev 2 or 3 boards
906                                       ENDIF
907       Y:0020 Y:0020         K_HV      DC      $080                              ; Tolerance of HV supply voltage
908       Y:0021 Y:0021         T_P15     DC      $5C0                              ; Target +15 volts supply voltage
909       Y:0022 Y:0022         K_P15     DC      $080                              ; Tolerance of +15 volts supply voltage
910       Y:0023 Y:0023         T_M15     DC      $A40                              ; Target -15 volts supply voltage
911       Y:0024 Y:0024         K_M15     DC      $080                              ; Tolerance of -15 volts supply voltage
912       Y:0025 Y:0025         I_HV      DC      0                                 ; Initial value of HV
913       Y:0026 Y:0026         I_P15     DC      0                                 ; Initial value of +15 volts
914       Y:0027 Y:0027         I_M15     DC      0                                 ; Initial value of -15 volts
915    
916                             ; Define some command names
917       Y:0028 Y:0028         CLR       DC      'CLR'                             ; Clear CCD
918       Y:0029 Y:0029         RDC       DC      'RDC'                             ; Readout CCD
919       Y:002A Y:002A         ABR       DC      'ABR'                             ; Abort readout
920       Y:002B Y:002B         OSH       DC      'OSH'                             ; Open shutter connected to timing board
921       Y:002C Y:002C         CSH       DC      'CSH'                             ; Close shutter connected to timing board
922       Y:002D Y:002D         POK       DC      'POK'                             ; Message to host - power in OK
923       Y:002E Y:002E         PER       DC      'PER'                             ; Message to host - ERROR in power up sequence
924       Y:002F Y:002F         SBV       DC      'SBV'                             ; Message to timing - set bias voltages
925       Y:0030 Y:0030         IDL       DC      'IDL'                             ; Message to timing - put camera in idle mode
926       Y:0031 Y:0031         STP       DC      'STP'                             ; Message to timing - Stop idling
927       Y:0032 Y:0032         NCL       DC      'NCL'                             ; Message to timing - Don't clear the CCD before
 an Exposure
928       Y:0033 Y:0033         DTH       DC      'DTH'                             ; Message to Timing - Dither ccd charge
929    
930                             ; Miscellaneous
931                             ; Heater value has been pegged to the limit given the current limiting resistors
932                             ; as of 2008 Aug 05
933                             ; CC00 now called HTMAX 2010 Oct 15
934    
935                             ;HTMAX  DC      $FFF    ; Maximum heater voltage so the board doesn't burn up- 40 ohms
936                             ; needs to defined in makefile
937                             ;HTMAX  DC      $800    ; Maximum heater voltage so the board doesn't burn up- 20 ohms
938       Y:0034 Y:0034         HTMAX     DC      $800                              ; Maximum heater voltage so the board doesn't bu
rn up- 10 ohms
939    
940                             ;CC00   DC      $FFF    ; Maximum heater voltage so the board doesn't burn up
941                             ;CC00   DC      $C00    ; Maximum heater voltage so the board doesn't burn up
942                             ;CC00   DC      $000            ; Set different max
943       Y:0035 Y:0035         SV_A1     DC      0                                 ; Save register A1 during analog processing
944       Y:0036 Y:0036         SV_SR     DC      0                                 ; Save status register during timer processing
945                              EL_TIM_FRACTION
946       Y:0037 Y:0037                   DC      0                                 ; Fraction of a millisecond of elapsed exposure 
time
947       Y:0038 Y:0038         INCR      DC      $CCCCCC                           ; Exposure time increment = 0.8 milliseconds
948       Y:0039 Y:0039         SH_DEL    DC      0                                 ; Shutter closing time.  No shutter in kepler sy
stem
949       Y:003A Y:003A         TEMP      DC      0                                 ; Temporary storage location for X:PBD word
950       Y:003B Y:003B         DAC1_LS   DC      0                                 ; Least significant part of heater voltage
951       Y:003C Y:003C         TGT_PIC   DC      1                                 ; Target number of pix in series.  Set by bashin
g
952       Y:003D Y:003D         NUMPIC    DC      0                                 ; Number of pix taken so far in this series
953       Y:003E Y:003E         T_COUNT   DC      0                                 ; Number of temp samples this integration
954       Y:003F Y:003F         T_SUM     DC      0                                 ; Running sum of temps
955       Y:0040 Y:0040         T_AVG     DC      0                                 ; Average temp from last integration
Motorola DSP56000 Assembler  Version 6.2.0   114-05-15  08:40:59  utilappl.s  Page 12



956       Y:0041 Y:0041         TH_COUNT  DC      0                                 ; Number of temp samples this integration
957       Y:0042 Y:0042         TH_SUM    DC      0                                 ; Running sum of temps
958       Y:0043 Y:0043         TH_AVG    DC      0                                 ; Average temp from last integration
959       Y:0044 Y:0044         ONE_K     DC      1024                              ; Number of samples in the integration, pwr of 2
960       Y:0045 Y:0045         WRDAC0    DC      0                                 ; DAC0 Voltage
961       Y:0046 Y:0046         WRDAC1    DC      0                                 ; DAC1 Voltage
962       Y:0047 Y:0047         WRDAC2    DC      0                                 ; DAC2 Voltage
963       Y:0048 Y:0048         WRDAC3    DC      0                                 ; DAC3 Voltage
964       Y:0049 Y:0049         DSP_VERS  DC      VERSION                           ; code version  This must remain at locn $49!!
965       Y:004A Y:004A         DACAWRS   DC      0                                 ; count of WDA cmds received
966       Y:004B Y:004B         W_CCDT    DC      $C00                              ; working target temperature, initially = T_CCDT
967       Y:004C Y:004C         TAV_SUM   DC      0                                 ; sum actual temperature
968       Y:004D Y:004D         W_COUNT   DC      0                                 ; count for working temp outer loop
969       Y:004E Y:004E         T_RSQ_0   DC      1                                 ; LSW for ccd dt running squared sum
970       Y:004F Y:004F         T_RSQ_1   DC      1                                 ; MSW for ccd dt running squared sum
971       Y:0050 Y:0050         T_LSQ_0   DC      1                                 ; LSW for ccd dt last cycle squared sum
972       Y:0051 Y:0051         T_LSQ_1   DC      1                                 ; MSW for ccd dt last cycle squared sum
973       Y:0052 Y:0052         T_LAVG    DC      1                                 ; sum actual temp last cycle
974    
975                                       IF      @SCP("ON","ON")
976       Y:0053 Y:0053         TAVLOOP   DC      TAVCNT                            ; meta-regulation loop - must match TAVSHF
977       Y:0054 Y:0054         MBOUND    DC      36                                ; bounds around T_CCDT
978                                       ENDIF
979    
980                             ; During the downloading of this application program the one millisecond
981                             ;   timer interrupts are enabled, so the utility board will attempt to execute
982                             ;   the partially downloaded TIMER routine, and crash. A workaround is to
983                             ;   put a RTI as the first instruction of TIMER so it doesn't execute, then
984                             ;   write the correct instruction only after all the rest of the application
985                             ;   program has been downloaded. Here it is -
986    
987       P:0091 P:0091                   ORG     P:APL_ADR+1,P:APL_ADR+1
988       P:0091 P:0091 053679  TIMER1    MOVEC                         SR,Y:<SV_SR ; Save Status Register
989    
990    
991                                ENDSEC                                    ; End of SECTION UTILAPPL
992    
993                      ; End of program
994                                END

0    Errors
0    Warnings


