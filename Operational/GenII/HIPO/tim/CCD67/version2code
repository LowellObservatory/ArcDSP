#! /usr/bin/perl  -w

# Converts a string on stdin of the form
# Va.b/c  [ab]  to a 24 bit version code with
# 4 6 bit subfields.
#
# it will optionally process flavor.
# 
#
# 23-18  a
# 17-12  b
# 11-06  c
# 05-00  check

# It puts a single line on standard output of the form
#
#  VERSION EQU  nnnnn  ;Va.b/c

# which is used by the 56xxx assembler to provide the processed version
# code to the DSP code.


# Written 13 March 2007  Peter L. Collins Lowell Observatory
# Modified 14 Apr 2008 to include optional flavor.


sub find_version() {
   $name= <STDIN>;
      if ( $name =~ /^V[0-9]*\.[0-9]*\/[0-9]* F[A-z]*/) {
          chomp($name);
#          print " The input version is $name";
	  $namev = $name;
	  $namev =~  s/^V//;
	  $namev =~  s/ F.*//;
	  $v1 = $namev;
	  $v2 = $namev;
	  $v3 = $namev;
	  $v1 =~ s/\.[0-9]*\/[0-9]*$//;
	  $v3 =~ s/[0-9]*\.[0-9]*\///;
	  $v2 =~ s/\/[0-9]*$//;
	  $v2 =~ s/[0-9]*\.//;
#	  print "the main version is $v1";
#	  print "the middle version is $v2";
#	  print "the last version is $v3";
	  $q = $v1 ^ $v2 ^ $v3;
	  $p = ($v1 << 18) | ($v2 << 12) | ($v3 << 6) | $q;
#	  print " the xor is  $q\n";

	  print("; DSP Version\n");
	  print "VERSION\tEQU\t$p\t; $namev\n\n";
	  $namef=$name;
	  $namef =~ s/.*F//;
	  $namef =~ s/ *$//;
	  if ( $namef =~ /[A-z][A-z]$/ ) {
	    print "FLAVOR\tEQU\t'$namef '\t ; $namef\n\n";
	  } else {
	     if ( $namef =~ /[A-z]$/ ) {
	        print "FLAVOR\tEQU\t'$namef  '\t ; $namef\n\n";
	     } else {
	        print ("BAD FLAVOR: $namef");
	     }
	  }
      } else {
      print "BAD VERSION NUMBER: $name\n"
      }
}


find_version();
