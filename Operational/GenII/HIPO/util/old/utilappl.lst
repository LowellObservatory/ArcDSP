Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 1



1                               COMMENT *
2      
3                        This file is used to generate DSP code for the utility board. It will time
4                             the exposure, operate the shutter, control the CCD temperature and
5                             turn the analog power on. This is Rev. 3.00 software.
6                        Modified 1-12-97 for 10 MHz input clock frequency by adding 2 to elapsed
7                             exposure time rather than one.
8                        Power ON sequence written for Gen II power control board, Rev. 4A
9      
10                       -d HOST 'HOST'  To generate code for downloading to DSP memory.
11                       -d HOST 'ROM'   To generate code for writing to the ROM.
12     
13                               *
14                                 PAGE    132                               ; Printronix page width - 132 columns
15                                                                           ;INCLUDE        "utilversion.s" ; versioning
16                                 INCLUDE "infospec.s"
17                       ; General DSP info field specifications.
18                       ; These values are 'addresses' and used as the argument for the INF command.
19     
20                       GET_VERSION
21        000000                   EQU     0                                 ; IVERSION field
22        000001         GET_FLAVOR EQU    1                                 ; IFLAVOR field
23        000002         GET_TIME0 EQU     2                                 ; ITIME0 field (lo order, time of compile)
24        000003         GET_TIME1 EQU     3                                 ; ITIME1 field (hi order, time of compile)
25        000004         GET_SVNREV EQU    4                                 ; ISVNREV field (highest svn rev if available)
26     
27                                 INCLUDE "utilinfospec.s"
28                       ; UTIL DSP info field specifications.
29                       ; These values are 'addresses' and used as the argument for the INF command.
30     
31                       GET_CAPABLE
32        000100                   EQU     $100                              ; ICAPABLE field (what dsp supports).
33     
34                                 INCLUDE "utilinfo.s"
35                       ; DSP Version
36        04307F         IVERSION  EQU     274559                            ; 1.3/1
37     
38        202020         IFLAVOR   EQU     '   '                             ; none
39     
40        002023         ITIME0    EQU     8227                              ; lo order time: 2010 10 16  3:46:43 GMT
41     
42        004CB9         ITIME1    EQU     19641                             ; hi order time: 2010 10 16  3:46:43 GMT
43     
44        000000         ISVNREV   EQU     0                                 ; most recent code svn rev
45     
46                                 INCLUDE "utilversion.s"
47        000000         VERSION   EQU     0
48                       UTILCAPABLE
49        000000                   EQU     0
50     
51                       ; Name it a section so it doesn't conflict with other application programs
52                                 SECTION UTILAPPL
53     
54                       ;  These are also defined in "utilboot.asm", so be sure they agree
55        000090         APL_ADR   EQU     $90                               ; Starting address of application program
56        000080         BUF_STR   EQU     $80                               ; Starting address of buffers in X:
57        000020         BUF_LEN   EQU     $20                               ; Length of buffers
58        000080         SSI_BUF   EQU     BUF_STR                           ; Starting address of SCI buffer in X:
59        0000A0         COM_BUF   EQU     SSI_BUF+BUF_LEN                   ; Starting address of command buffer in X:
60        0000C0         COM_TBL   EQU     COM_BUF+BUF_LEN                   ; Starting address of command table in X:
61     
62                       ;  Define some useful constants
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 2



63        001EE0         APL_XY    EQU     $1EE0                             ; Starting address in EEPROM of X: and Y: values
64        000046         DLY_MUX   EQU     70                                ; Number of DSP cycles to delay for MUX settling
65        000064         DLY_AD    EQU     100                               ; Number of DSP cycles to delay for A/D settling
66     
67                       ; Assign addresses to port B data register
68        00FFE4         PBD       EQU     $FFE4                             ; Port B Data Register
69        00FFFF         IPR       EQU     $FFFF                             ; Interrupt Priority Register
70     
71                       ;  Addresses of memory mapped components in Y: data memory space
72                       ;  Write addresses first
73        00FFF0         WR_DIG    EQU     $FFF0                             ; was $FFFF  Write Digital output values D00-D15
74        00FFF1         WR_MUX    EQU     $FFF1                             ; Select MUX connected to A/D input - one of 16
75        00FFF2         EN_DIG    EQU     $FFF2                             ; Enable digital outputs
76        00FFF7         WR_DAC3   EQU     $FFF7                             ; Write to DAC#3 D00-D11
77        00FFF6         WR_DAC2   EQU     $FFF6                             ; Write to DAC#2 D00-D11
78        00FFF5         WR_DAC1   EQU     $FFF5                             ; Write to DAC#1 D00-D11
79        00FFF4         WR_DAC0   EQU     $FFF4                             ; Write to DAC#0 D00-D11
80                       ;WR_DAC0        EQU     $FFF6           ; Redirect Heater DAC
81                       ;WR_DAC1        EQU     $FFF7           ; Redirect Heater DAC
82     
83                       ;  Read addresses next
84        00FFF0         RD_DIG    EQU     $FFF0                             ; Read Digital input values D00-D15
85        00FFF1         STR_ADC   EQU     $FFF1                             ; Start ADC conversion, ignore data
86        00FFF2         RD_ADC    EQU     $FFF2                             ; Read A/D converter value D00-D11
87        00FFF7         WATCH     EQU     $FFF7                             ; Watch dog timer - tell it that DSP is alive
88     
89                       ;  Bit definitions of STATUS word
90        000000         ST_SRVC   EQU     0                                 ; Set if ADC routine needs executing
91        000001         ST_EX     EQU     1                                 ; Set if timed exposure is in progress
92        000002         ST_SH     EQU     2                                 ; Set if shutter is open
93        000003         ST_READ   EQU     3                                 ; Set if a readout needs to be initiated
94        000004         STRT_EX   EQU     4                                 ; Set to indicate start of exposure
95        000007         DITHMODE  EQU     7                                 ; Set for dithering during exp.  Bash to set
96        000008         CONT_EX   EQU     8                                 ; Set to indicate cont. exp mode. Bash to set
97     
98                       ; Bit definitions of software OPTIONS word
99        000000         OPT_SH    EQU     0                                 ; Set to open and close shutter.  Bash to set
100    
101                      ;  Bit definitions of Port B = Host Processor Interface
102       000000         PWR_EN1   EQU     0                                 ; Power enable bit ONE - Output
103       000001         PWR_EN0   EQU     1                                 ; Power enable bit ZERO  - Output
104       000002         PWRST     EQU     2                                 ; Reset power conditioner counter - Output
105       000003         SHUTTER   EQU     3                                 ; Control shutter - Output
106       000004         IRQ_T     EQU     4                                 ; Request interrupt service from timing board - Output
107       000005         SYS_RST   EQU     5                                 ; Reset entire system - Output
108       000008         WATCH_T   EQU     8                                 ; Processed watchdog signal from timing board - Input
109    
110    
111                      ;   Definitions for outer working temps loop.
112       000080         OUTERCNT  EQU     128
113       000007         OUTERSHF  EQU     7
114    
115                      ;**************************************************************************
116                      ;                                                                         *
117                      ;    Register assignments                                                 *
118                      ;        R1 - Address of SCI receiver contents                            *
119                      ;        R2 - Address of processed SCI receiver contents                  *
120                      ;        R3 - Pointer to current top of command buffer                    *
121                      ;        R4 - Pointer to processed contents of command buffer             *
122                      ;        N4 - Address for internal jumps after receiving 'DON' replies    *
123                      ;        R0, R5, R6, A, X0, X1 - For use by program only                  *
124                      ;        R7 - For use by SCI ISR only                                     *
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 3



125                      ;        Y0, Y1, and B - For use by timer ISR only. If any of these       *
126                      ;               registers are needed elsewhere they must be saved and     *
127                      ;               restored in the TIMER ISR.                                *
128                      ;**************************************************************************
129    
130                      ; Specify execution and load addresses.
131       P:0090 P:0090                   ORG     P:APL_ADR,P:APL_ADR
132    
133                             ; The TIMER addresses must be defined here and SERVICE must follow to match
134                             ;   up with the utilboot code
135       P:0090 P:0090 0C00A0            JMP     <SERVICE                          ; Millisecond timer interrupt
136    
137       P:0091 P:0091 000004  TIMER     RTI                                       ; RTI for now so downloading works
138       P:0092 P:0092 0A0160            BSET    #0,Y:<DIG_OUT                     ; FIDUCIAL PULSE
139       P:0093 P:0093 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
140       P:0095 P:0095 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
141                             ;       JCLR    #ST_EX,X:STATUS,NO_TIM  ; Continue on if we're not exposing
142                             ;       JCLR    #STRT_EX,X:<STATUS,EX_STRT ; Skip if exposure has been started
143                             ;       BCLR    #STRT_EX,X:<STATUS      ; Clear status = "not start of exposure"
144                             ;       CLR     B
145                             ;       MOVE    B,Y:<EL_TIM_MSECONDS    ; Initialize elapsed time
146                             ;       MOVE    B,Y:<EL_TIM_FRACTION
147                             ;       MOVE    B,Y:<NUMPIC             ; clear number of pix in series
148                             ;       JCLR    #OPT_SH,X:<OPTIONS,NO_TIM ; Don't open shutter if a dark frame
149                             ;       JSR     <OSHUT                  ; Open shutter if start of exposure
150                             ;       JMP     <NO_TIM                 ; Don't increment EL_TIM at first
151                             ;EX_STRT
152                             ;       CLR     B   Y:<INCR,Y0          ; INCR = 0.8 milli? seconds
153                             ;       MOVE    X:<ZERO,Y1
154                             ;       MOVE    Y:<EL_TIM_MSECONDS,B1   ; Get elapsed time
155                             ;       MOVE    Y:<EL_TIM_FRACTION,B0
156                             ;       ADD     Y,B   Y:<TGT_TIM,Y1     ; EL_TIM = EL_TIM + 0.8 milliseconds
157                             ;       MOVE    B0,Y:<EL_TIM_FRACTION
158                             ;       SUB     Y1,B  B1,Y:<EL_TIM_MSECONDS
159                             ;       JLT     <NO_TIM                 ; If (EL .GE. TGT) we've timed out
160    
161                             ; Close the shutter at once if needed
162                             ;       JCLR    #OPT_SH,X:OPTIONS,NO_SHUT ; Close the shutter only if needed
163                             ;       BSET    #SHUTTER,X:PBD          ; Set Port B bit #3 to close shutter
164                             ;       BSET    #ST_SH,X:<STATUS        ; Set status to mean shutter closed
165    
166                             ; Wait SH_DLY milliseconds for the shutter to fully close before reading out
167                             ;NO_SHUT
168                             ;       MOVE    Y:<SH_DEL,Y1            ; Get shutter closing time
169                             ;       SUB     Y1,B                    ; B = EL_TIM - (TGT_TIM + SH_DEL)
170                             ;       JLT     <NO_TIM                 ; If (EL .GE. TGT+DEL) we've timed out
171                             ;       BSET    #ST_READ,X:<STATUS      ; Set so a readout will be initiated
172                             ;       CLR     B
173                             ;       MOVE    B,Y:<EL_TIM_MSECONDS    ; Initialize elapsed time
174                             ;       MOVE    B,Y:<EL_TIM_FRACTION    ; for next image in series
175                             ;       MOVE    Y:<NUMPIC,B0            ; Increment NUMPIC
176                             ;       INC     B
177                             ;       MOVE    B0,Y:<NUMPIC
178                             ;       MOVE    Y:TGT_PIC,Y0            ; Get target number of pix
179                             ;       MOVE    X:<ZERO,Y1
180                             ;       SUB     Y,B
181                             ;       JLT     <NO_TIM                 ; If NUMPIC .GE. TGT_PIC, done
182                             ;       BCLR    #ST_EX,X:<STATUS        ; No longer exposing
183                             ;       BCLR    #CONT_EX,X:<STATUS      ; or taking a series
184    
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 4



185                             ; Return from interrupt
186                             NO_TIM
187       P:0097 P:0097 0A0020            BSET    #ST_SRVC,X:<STATUS                ; SERVICE needs executing
188       P:0098 P:0098 0A0140            BCLR    #0,Y:<DIG_OUT                     ; FIDUCIAL PULSE
189       P:0099 P:0099 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
190       P:009B P:009B 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
191       P:009D P:009D 05B679            MOVEC                         Y:<SV_SR,SR ; Restore Status Register
192       P:009E P:009E 000000            NOP
193       P:009F P:009F 000004            RTI                                       ; Return from TIMER interrupt
194    
195                             ; This long subroutine is executed every millisecond, but isn't an ISR so
196                             ;   that care need not be taken to preserve registers and stacks.
197                             SERVICE
198       P:00A0 P:00A0 0A0000            BCLR    #ST_SRVC,X:<STATUS                ; Clear request to execute SERVICE
199                             ;       JCLR    #ST_READ,X:<STATUS,DTH_CHK ; Initiate readout?
200    
201                             ; Extra call if using the VME interface board
202                                       IF      @SCP("INTERFACE","VME")
207                                       ENDIF
208    
209                             ;       MOVE    X:<TIMING,A
210                             ;       MOVE    A,X:(R3)+               ; Header from Utility to timing
211                             ;       MOVE    Y:<RDC,A
212                             ;       MOVE    A,X:(R3)+               ; Start reading out the CCD
213                             ;       BCLR    #ST_READ,X:<STATUS      ; Readout will be initiated
214                             ;       JSET    #CONT_EX,X:STATUS,BAILOUT       ; Don't clear ST_EX if series
215                             ;       BCLR    #ST_EX,X:<STATUS        ; Exposure is no longer in progress
216                             BAILOUT
217                             ;       MOVEP   Y:WATCH,X0              ; Reset Watchdog Timer
218                             ;       RTS                             ; Return now to save time
219    
220                             ; If we are supposed to dither, put a DTH command to timer on queue
221                             ;DTH_CHK        JCLR #DITHMODE,X:<STATUS,UPD_DIG
222                             ;       MOVE    X:<TIMING,A
223                             ;       MOVE    A,X:(R3)+               ; Header from Utility to timing
224                             ;       MOVE    Y:<DTH,A
225                             ;       MOVE    A,X:(R3)+               ; Dither command to queue
226    
227                             ; Update all the digital input/outputs; reset watchdog timer
228       P:00A1 P:00A1 0970F0  UPD_DIG   MOVEP             Y:RD_DIG,Y:DIG_IN       ; Read 16 digital inputs
                        000000
229       P:00A3 P:00A3 0A0161            BSET    #1,Y:<DIG_OUT                     ; FIDUCIAL PULSE
230       P:00A4 P:00A4 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
231       P:00A6 P:00A6 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
232       P:00A8 P:00A8 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
233                             ; Update the 4 DACs
234       P:00A9 P:00A9 09F0F4            MOVEP             Y:DAC0,Y:WR_DAC0        ; Write to DAC0
                        000002
235       P:00AB P:00AB 09F0F5            MOVEP             Y:DAC1,Y:WR_DAC1        ; Write to DAC1
                        000003
236       P:00AD P:00AD 09F0F6            MOVEP             Y:DAC2,Y:WR_DAC2        ; Write to DAC2
                        000004
237       P:00AF P:00AF 09F0F7            MOVEP             Y:DAC3,Y:WR_DAC3        ; Write to DAC3
                        000005
238    
239                             ; Analog Input processor - read the 16 A/D inputs
240       P:00B1 P:00B1 448000            MOVE              X:<ONE,X0               ; For incrementing accumulator to select MUX
241       P:00B2 P:00B2 350713            CLR     A         #<AD_IN,R5              ; Will contain MUX number
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 5



242       P:00B3 P:00B3 060640            DO      Y:NUM_AD,LOOP_AD                  ; Loop over each A/D converter input
                        0000C2
243       P:00B5 P:00B5 09CE31            MOVEP             A,Y:WR_MUX              ; Select MUX input
244       P:00B6 P:00B6 064680            DO      #DLY_MUX,L_AD1                    ; Wait for the MUX to settle
                        0000B8
245       P:00B8 P:00B8 5C3500            MOVE                          A1,Y:<SV_A1 ; DO needed so SSI input can come in
246                             L_AD1
247       P:00B9 P:00B9 094531            MOVEP             Y:STR_ADC,X1            ; Start A/D conversion - dummy read
248       P:00BA P:00BA 066480            DO      #DLY_AD,L_AD2                     ; Wait for the A/D to settle
                        0000BC
249       P:00BC P:00BC 458000            MOVE              X:<CFFF,X1
250                             L_AD2
251       P:00BD P:00BD 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
252       P:00BE P:00BE 200066            AND     X1,A                              ; A/D is only valid to 12 bits
253       P:00BF P:00BF 0BCC4B            BCHG    #11,A1                            ; Change 12-bit 2's complement to unipolar
254       P:00C0 P:00C0 5C5D00            MOVE                          A1,Y:(R5)+  ; Put the A/D value in the table
255       P:00C1 P:00C1 5CB500            MOVE                          Y:<SV_A1,A1 ; Restore A1 = MUX number
256       P:00C2 P:00C2 200040            ADD     X0,A                              ; Increment A = MUX number by one
257                             LOOP_AD
258       P:00C3 P:00C3 09F0B1            MOVEP             X:ONE,Y:WR_MUX          ; Sample +5V when idle
                        000000
259    
260                             ; Control the CCD Temperature
261                             ; The algorithmn assumes a reverse biased diode whose A/D count A_CCDT
262                             ;   is proportional to temperature. Don't start controlling temperature
263                             ;   until it falls below target temperature. ADUs decrease with temp.
264                             ; Changed to run an RTD where the ADUs increase with temperature.
265                             ; Modified to average a bunch of temps, then change the heater current
266                             ; For initialization, depend on assembler setting to zero.
267       P:00C5 P:00C5 4C8D00            MOVE                          Y:<B_CCDT,X0 ; Get Cold Head temperature
268       P:00C6 P:00C6 58F000            MOVE                          Y:TH_SUM,A0 ; Get CH running Sum
                        000042
269       P:00C8 P:00C8 548000            MOVE              X:<ZERO,A1
270       P:00C9 P:00C9 218500            MOVE              A1,X1
271       P:00CA P:00CA 200020            ADD     X,A                               ; Add CH to running sum
272       P:00CB P:00CB 587000            MOVE                          A0,Y:TH_SUM ; and store it
                        000042
273       P:00CD P:00CD 58F000            MOVE                          Y:TH_COUNT,A0 ; Get the count
                        000041
274       P:00CF P:00CF 000008            INC     A                                 ; Add 1
275       P:00D0 P:00D0 587000            MOVE                          A0,Y:TH_COUNT ; and store it
                        000041
276       P:00D2 P:00D2 4CF000            MOVE                          Y:ONE_K,X0  ; Get number to average
                        000044
277       P:00D4 P:00D4 200024            SUB     X,A
278       P:00D5 P:00D5 0E90E2            JLT     <C_TEMP                           ; If T_COUNT .GE. 1024, find avg, update
279       P:00D6 P:00D6 58F000            MOVE                          Y:TH_SUM,A0 ; Here if done.  Get final sum
                        000042
280       P:00D8 P:00D8 060AA0            REP     #10
281       P:00D9 P:00D9 200022            ASR     A                                 ; Averaging the temperature
282       P:00DA P:00DA 587000            MOVE                          A0,Y:TH_AVG ; Save the average temperature
                        000043
283       P:00DC P:00DC 210400            MOVE              A0,X0                   ; and stick in X0
284       P:00DD P:00DD 200013            CLR     A                                 ; Now clear sum and count
285       P:00DE P:00DE 587000            MOVE                          A0,Y:TH_SUM
                        000042
286       P:00E0 P:00E0 587000            MOVE                          A0,Y:TH_COUNT
                        000041
287                             ; This is section handles the CCD temperature. It reads the temp then
288                             ; averages and applies the heater current if necessary
289                             C_TEMP
290       P:00E2 P:00E2 4C8C00            MOVE                          Y:<A_CCDT,X0 ; Get actual CCD temperature
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 6



291       P:00E3 P:00E3 58BF00            MOVE                          Y:<T_SUM,A0 ; Get the running sum
292       P:00E4 P:00E4 548000            MOVE              X:<ZERO,A1
293       P:00E5 P:00E5 218500            MOVE              A1,X1
294       P:00E6 P:00E6 200020            ADD     X,A                               ; add on this temperature
295       P:00E7 P:00E7 583F00            MOVE                          A0,Y:<T_SUM ; and store it
296       P:00E8 P:00E8 208500            MOVE              X0,X1
297       P:00E9 P:00E9 2000A8            MPY     X0,X1,B
298       P:00EA P:00EA 5CF000            MOVE                          Y:T_RSQ_1,A1
                        00004E
299       P:00EC P:00EC 58F000            MOVE                          Y:T_RSQ_0,A0
                        00004D
300       P:00EE P:00EE 200018            ADD     A,B
301       P:00EF P:00EF 58BE00            MOVE                          Y:<T_COUNT,A0 ; Get the count
302       P:00F0 P:00F0 5D7000            MOVE                          B1,Y:T_RSQ_1
                        00004E
303       P:00F2 P:00F2 597000            MOVE                          B0,Y:T_RSQ_0
                        00004D
304       P:00F4 P:00F4 000008            INC     A                                 ; Add 1
305       P:00F5 P:00F5 583E00            MOVE                          A0,Y:<T_COUNT ; and store it
306       P:00F6 P:00F6 4CF000            MOVE                          Y:ONE_K,X0  ; Get number to average
                        000044
307       P:00F8 P:00F8 200024            SUB     X,A
308       P:00F9 P:00F9 0E913F            JLT     <SKIP_T                           ; If T_COUNT .GE. 1024, find avg, update
309       P:00FA P:00FA 58BF00            MOVE                          Y:<T_SUM,A0 ; Here if done.  Get final sum
310       P:00FB P:00FB 060AA0            REP     #10
311       P:00FC P:00FC 200022            ASR     A                                 ; Averaging the temperature
312       P:00FD P:00FD 587000            MOVE                          A0,Y:T_AVG  ; Save the average temperature
                        000040
313       P:00FF P:00FF 210400            MOVE              A0,X0                   ; and stick in X0
314       P:0100 P:0100 4EF000            MOVE                          Y:T_RSQ_0,Y0
                        00004D
315       P:0102 P:0102 4E7000            MOVE                          Y0,Y:T_LSQ_0
                        00004F
316       P:0104 P:0104 4EF000            MOVE                          Y:T_RSQ_1,Y0
                        00004E
317       P:0106 P:0106 4E7000            MOVE                          Y0,Y:T_LSQ_1
                        000050
318       P:0108 P:0108 59F000            MOVE                          Y:T_RSQ_1,B0
                        00004E
319       P:010A P:010A 200013            CLR     A                                 ; Now clear sum and count
320       P:010B P:010B 583F00            MOVE                          A0,Y:<T_SUM
321       P:010C P:010C 587000            MOVE                          A0,Y:T_RSQ_0
                        00004D
322       P:010E P:010E 587000            MOVE                          A0,Y:T_RSQ_1
                        00004E
323       P:0110 P:0110 583E00            MOVE                          A0,Y:<T_COUNT
324       P:0111 P:0111 5EF000            MOVE                          Y:W_CCDT,A  ; Get target CCD temperature
                        00004A
325       P:0113 P:0113 200044            SUB     X0,A
326       P:0114 P:0114 21C400            MOVE              A,X0                    ; X0 now target - actual
327       P:0115 P:0115 4D9D00            MOVE                          Y:<T_COEFF,X1
328       P:0116 P:0116 2000A0            MPY     X0,X1,A                           ; A = (target - actual) * T_COEFF
329       P:0117 P:0117 200022            ASR     A                                 ; Shift right to fix *2
330       P:0118 P:0118 4CB400            MOVE                          Y:<HTMAX,X0 ; Heats greater than this are not allowed
331       P:0119 P:0119 210C00            MOVE              A0,A1                   ;
332       P:011A P:011A 200045            CMP     X0,A
333       P:011B P:011B 0E911E            JLT     <TST_LOW
334       P:011C P:011C 208E00            MOVE              X0,A                    ; Make it the maximum heat
335       P:011D P:011D 0C0121            JMP     <WR_DAC
336                             TST_LOW
337       P:011E P:011E 200003            TST     A                                 ; Heats of less than zero are not allowed
338       P:011F P:011F 0E7121            JGT     <WR_DAC
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 7



339       P:0120 P:0120 568000            MOVE              X:<ZERO,A               ; No heat
340                             WR_DAC
341       P:0121 P:0121 09CC34            MOVEP             A1,Y:WR_DAC0            ; Update DAC and record of it
342       P:0122 P:0122 5C0200            MOVE                          A1,Y:<DAC0
343       P:0123 P:0123 5C1E00            MOVE                          A1,Y:<DAC0_LS
344    
345                             ;       code to manage new 'working' detector temperature
346       P:0124 P:0124 4CF000            MOVE                          Y:T_AVG,X0  ; outermost 2 minute loop- sum average actual
                        000040
347       P:0126 P:0126 5EF000            MOVE                          Y:TAV_SUM,A
                        00004B
348       P:0128 P:0128 200040            ADD     X0,A
349       P:0129 P:0129 5C7000            MOVE                          A1,Y:TAV_SUM ; update sum, actual ccd temp
                        00004B
350       P:012B P:012B 5FF000            MOVE                          Y:W_COUNT,B
                        00004C
351       P:012D P:012D 240100            MOVE              #1,X0
352       P:012E P:012E 200048            ADD     X0,B
353       P:012F P:012F 5D7000            MOVE                          B1,Y:W_COUNT
                        00004C
354       P:0131 P:0131 248000            MOVE              #OUTERCNT,X0
355       P:0132 P:0132 20004C            SUB     X0,B
356       P:0133 P:0133 0AF0A9            JLT     SKIP_T
                        00013F
357                                                                                 ; convert TAV_SUM in A to average by right shift
358       P:0135 P:0135 0607A0            REP     #OUTERSHF
359       P:0136 P:0136 200022            ASR     A                                 ; ROUND?
360       P:0137 P:0137 4C9C00            MOVE                          Y:<T_CCDT,X0
361       P:0138 P:0138 200044            SUB     X0,A
362       P:0139 P:0139 200022            ASR     A                                 ; DeltaT*0.5 in A
363       P:013A P:013A 4CF000            MOVE                          Y:W_CCDT,X0
                        00004A
364       P:013C P:013C 200040            ADD     X0,A
365       P:013D P:013D 5C7000            MOVE                          A1,Y:W_CCDT
                        00004A
366    
367                             SKIP_T
368       P:013F P:013F 0A0141            BCLR    #1,Y:<DIG_OUT                     ; FIDUCIAL PULSE
369       P:0140 P:0140 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
370       P:0142 P:0142 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
371       P:0144 P:0144 00000C            RTS                                       ; Return from subroutine SERVICE call
372    
373                             ; Shutter support subroutines for the TIMER executive
374                             ; Also support shutter connection to timing board for now.
375                             ;OSHUT  BCLR    #SHUTTER,X:PBD          ; Clear Port B bit #3 to open shutter
376                             ;        BCLR    #ST_SH,X:<STATUS       ; Clear status bit to mean shutter open
377                             ;        RTS
378    
379                             ;CSHUT  BSET    #SHUTTER,X:PBD  ; Set Port B bit #3 to close shutter
380                             ;        BSET    #ST_SH,X:<STATUS ; Set status to mean shutter closed
381                             ;        RTS
382    
383                             ; These are called directly by command, so need to call subroutines in turn
384                             OPEN
385                             ;       JSR     OSHUT           ; Call open shutter subroutine
386    
387       P:0145 P:0145 0C0000            JMP     <FINISH                           ; Send 'DON' reply
388                             CLOSE
389                             ;       JSR     CSHUT           ; Call close shutter subroutine
390       P:0146 P:0146 0C0000            JMP     <FINISH                           ; Send 'DON' reply
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 8



391    
392    
393                             ;       Process INF according to the single addressing parameter
394                             GET_INFO
395       P:0147 P:0147 56DC00            MOVE              X:(R4)+,A               ; 0-4 is generic, >= 0x100 tim specific
396       P:0148 P:0148 44F400            MOVE              #IVERSION,X0
                        04307F
397       P:014A P:014A 46F400            MOVE              #>GET_VERSION,Y0
                        000000
398       P:014C P:014C 200055            CMP     Y0,A
399       P:014D P:014D 0EA000            JEQ     <FINISH1
400       P:014E P:014E 44F400            MOVE              #IFLAVOR,X0
                        202020
401       P:0150 P:0150 46F400            MOVE              #>GET_FLAVOR,Y0
                        000001
402       P:0152 P:0152 200055            CMP     Y0,A
403       P:0153 P:0153 0EA000            JEQ     <FINISH1
404       P:0154 P:0154 44F400            MOVE              #ITIME0,X0
                        002023
405       P:0156 P:0156 46F400            MOVE              #>GET_TIME0,Y0
                        000002
406       P:0158 P:0158 200055            CMP     Y0,A
407       P:0159 P:0159 0EA000            JEQ     <FINISH1                          ; Is it Time0?
408       P:015A P:015A 44F400            MOVE              #ITIME1,X0
                        004CB9
409       P:015C P:015C 46F400            MOVE              #>GET_TIME1,Y0
                        000003
410       P:015E P:015E 200055            CMP     Y0,A
411       P:015F P:015F 0EA000            JEQ     <FINISH1                          ; Is it Time1?
412       P:0160 P:0160 240000            MOVE              #ISVNREV,X0
413       P:0161 P:0161 46F400            MOVE              #>GET_SVNREV,Y0
                        000004
414       P:0163 P:0163 200055            CMP     Y0,A
415       P:0164 P:0164 0EA000            JEQ     <FINISH1                          ; Is it Svn rev?
416       P:0165 P:0165 240000            MOVE              #UTILCAPABLE,X0
417       P:0166 P:0166 46F400            MOVE              #>GET_CAPABLE,Y0
                        000100
418       P:0168 P:0168 200055            CMP     Y0,A
419       P:0169 P:0169 0EA000            JEQ     <FINISH1                          ; Is it Tim Capabilities?
420       P:016A P:016A 0C0000            JMP     <ERROR
421    
422                             ;  **************  BEGIN  COMMAND  PROCESSING  ***************
423                             ; Power off
424                                       IF      @SCP("POWER","R6")
429                                       ELSE                                      ; Earlier Revision power control boards
430                             PWR_OFF
431       P:016B P:016B 0AA422            BSET    #PWRST,X:PBD                      ; Reset power control board
432       P:016C P:016C 0AA402            BCLR    #PWRST,X:PBD
433                                       ENDIF
434       P:016D P:016D 0C0000            JMP     <FINISH                           ; Reply 'DON'
435    
436                             ; Start power-on cycle
437                             ; PWRST must be the same as PWR_EN0 because they're connected on the backplane
438                             PWR_ON
439       P:016E P:016E 08F4BF            MOVEP             #$2000,X:IPR            ; Disable TIMER interrupts
                        002000
440       P:0170 P:0170 0A7029            BSET    #9,X:PBDDR                        ; Make sure PWREN is an input
                        000000
441                                       IF      @SCP("POWER","R6")
445                                       ELSE
446       P:0172 P:0172 0AA422            BSET    #PWRST,X:PBD                      ; Reset power control board
447       P:0173 P:0173 061EA0            REP     #30
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 9



448       P:0174 P:0174 000000            NOP
449       P:0175 P:0175 0AA402            BCLR    #PWRST,X:PBD
450                                       ENDIF
451    
452                             ; Set up the bias voltage DACs and clock drivers on the analog boards
453       P:0176 P:0176 568000            MOVE              X:<TIMING,A
454       P:0177 P:0177 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
455       P:0178 P:0178 5EB000            MOVE                          Y:<IDL,A
456       P:0179 P:0179 565B00            MOVE              A,X:(R3)+               ; Start up the clock drivers
457       P:017A P:017A 74F400            MOVE              #PWR_ON1,N4             ; Set internal jump address after 'DON'
                        00017D
458       P:017C P:017C 0C0000            JMP     <XMT_CHK                          ; Send out commands to timing board
459    
460                             ; Wait a little while for at least one cycle of serial and parallel clocks
461                             PWR_ON1
462       P:017D P:017D 44F400            MOVE              #30000,X0
                        007530
463       P:017F P:017F 06C400            DO      X0,WT_PON1                        ; Wait 20 millisec or so for settling
                        000182
464       P:0181 P:0181 0605A0            REP     #5
465       P:0182 P:0182 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
466                             WT_PON1
467       P:0183 P:0183 568000            MOVE              X:<TIMING,A
468       P:0184 P:0184 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
469       P:0185 P:0185 5EB100            MOVE                          Y:<STP,A
470       P:0186 P:0186 565B00            MOVE              A,X:(R3)+               ; Stop the clocks during power on
471       P:0187 P:0187 74F400            MOVE              #PWR_ON2,N4             ; Set internal jump address after 'DON'
                        00018A
472       P:0189 P:0189 0C0000            JMP     <XMT_CHK                          ; Send the command to the timing board
473    
474                             ; Now ramp up the low voltages (+/- 6.5V, 16.5V)
475                                       IF      @SCP("POWER","R6")
478                                       ELSE
479       P:018A P:018A 0AA420  PWR_ON2   BSET    #LVEN,X:PBD                       ; Make sure line is high to start with
480       P:018B P:018B 06FF80            DO      #255,L_PON1                       ; The power conditioner board wants to
                        00018E
481       P:018D P:018D 0BA400            BCHG    #LVEN,X:PBD                       ;   see 128 H --> L transitions
482       P:018E P:018E 000000            NOP                                       ; Backplane signal settling time delay
483                             L_PON1
484                                       ENDIF
485    
486       P:018F P:018F 0D01DC            JSR     <PWR_DLY                          ; Delay for a little while
487       P:0190 P:0190 09F4B1            MOVEP             #2,Y:WR_MUX             ; Select +15V MUX input
                        000002
488       P:0192 P:0192 44F400            MOVE              #40000,X0
                        009C40
489       P:0194 P:0194 06C400            DO      X0,WT_PON2                        ; Wait 20 millisec or so for settling
                        000197
490       P:0196 P:0196 0605A0            REP     #5
491       P:0197 P:0197 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
492                             WT_PON2
493       P:0198 P:0198 094431            MOVEP             Y:STR_ADC,X0            ; Start A/D conversion - dummy read
494       P:0199 P:0199 066480            DO      #DLY_AD,L_PON2                    ; Wait for the A/D to settle
                        00019B
495       P:019B P:019B 448013            CLR     A         X:<CFFF,X0              ; This saves some space
496                             L_PON2
497       P:019C P:019C 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
498       P:019D P:019D 4CA146            AND     X0,A                  Y:<T_P15,X0 ; A/D is only valid to 12 bits
499    
500                             ; Test that the voltage is in the range abs(initial - target) < margin
501       P:019E P:019E 5C2644            SUB     X0,A                  A1,Y:<I_P15
502       P:019F P:019F 4CA226            ABS     A                     Y:<K_P15,X0
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 10



503       P:01A0 P:01A0 200044            SUB     X0,A
504       P:01A1 P:01A1 0E71D5            JGT     <PERR                             ; Take corrective action
505    
506       P:01A2 P:01A2 09F4B1  TST_M15   MOVEP             #3,Y:WR_MUX             ; Select -15v MUX input
                        000003
507       P:01A4 P:01A4 064680            DO      #DLY_MUX,L_PON3                   ; Wait for the MUX to settle
                        0001A6
508       P:01A6 P:01A6 000000            NOP
509                             L_PON3
510       P:01A7 P:01A7 094431            MOVEP             Y:STR_ADC,X0            ; Start A/D conversion - dummy read
511       P:01A8 P:01A8 066480            DO      #DLY_AD,L_PON4                    ; Wait for the A/D to settle
                        0001AA
512       P:01AA P:01AA 448013            CLR     A         X:<CFFF,X0              ; Clear A, so put it in DO loop
513                             L_PON4
514       P:01AB P:01AB 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
515       P:01AC P:01AC 4CA346            AND     X0,A                  Y:<T_M15,X0 ; A/D is only valid to 12 bits
516    
517                             ; Test that the voltage is in the range abs(initial - target) < margin
518       P:01AD P:01AD 5C2744            SUB     X0,A                  A1,Y:<I_M15
519       P:01AE P:01AE 4CA426            ABS     A                     Y:<K_M15,X0
520       P:01AF P:01AF 200044            SUB     X0,A
521       P:01B0 P:01B0 0E71D5            JGT     <PERR
522    
523                             ; Now turn on the high voltage HV (nominally +36 volts)
524                                       IF      @SCP("POWER","R6")
526                                       ELSE
527       P:01B1 P:01B1 0AA420  HV_ON     BSET    #HVEN,X:PBD                       ; Make sure line is high to start with
528       P:01B2 P:01B2 06FF80            DO      #255,L_PON5                       ; The power conditioner board wants to
                        0001B4
529       P:01B4 P:01B4 0BA400            BCHG    #HVEN,X:PBD                       ;   see 128 H --> L transitions
530                             L_PON5
531                                       ENDIF
532    
533       P:01B5 P:01B5 0D01DC            JSR     <PWR_DLY                          ; Delay for a little while
534       P:01B6 P:01B6 09F4B1            MOVEP             #1,Y:WR_MUX             ; Select high voltage MUX input
                        000001
535       P:01B8 P:01B8 44F400            MOVE              #30000,X0
                        007530
536       P:01BA P:01BA 06C400            DO      X0,WT_HV                          ; Wait a few millisec for settling
                        0001BC
537       P:01BC P:01BC 000000            NOP
538                             WT_HV
539       P:01BD P:01BD 094431            MOVEP             Y:STR_ADC,X0            ; Start A/D conversion - dummy read
540       P:01BE P:01BE 066480            DO      #DLY_AD,L_PON6                    ; Wait for the A/D to settle
                        0001C0
541       P:01C0 P:01C0 448013            CLR     A         X:<CFFF,X0              ; Clear A, so put it in DO loop
542                             L_PON6
543       P:01C1 P:01C1 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
544       P:01C2 P:01C2 4C9F46            AND     X0,A                  Y:<T_HV,X0  ; A/D is only valid to 12 bits
545    
546                             ; Test that the voltage is in the range abs(initial - target) < margin
547       P:01C3 P:01C3 5C2544            SUB     X0,A                  A1,Y:<I_HV
548       P:01C4 P:01C4 4CA026            ABS     A                     Y:<K_HV,X0
549       P:01C5 P:01C5 200044            SUB     X0,A
550       P:01C6 P:01C6 0E71D5            JGT     <PERR                             ; Take corrective action
551    
552                             ; Command the timing board to turn on the analog board DC bias voltages
553       P:01C7 P:01C7 568000            MOVE              X:<TIMING,A
554       P:01C8 P:01C8 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
555       P:01C9 P:01C9 5EAF00            MOVE                          Y:<SBV,A
556       P:01CA P:01CA 565B00            MOVE              A,X:(R3)+               ; Set bias voltages
557       P:01CB P:01CB 74F400            MOVE              #PWR_ON3,N4             ; Set internal jump address after 'DON'
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 11



                        0001CE
558       P:01CD P:01CD 0C0000            JMP     <XMT_CHK                          ; Send out commands to timing board
559    
560                             ; Reply with a DONE message to the host computer
561       P:01CE P:01CE 568000  PWR_ON3   MOVE              X:<HOST,A
562       P:01CF P:01CF 565B00            MOVE              A,X:(R3)+               ; Header to host
563       P:01D0 P:01D0 568000            MOVE              X:<DON,A
564       P:01D1 P:01D1 565B00            MOVE              A,X:(R3)+               ; Power is now ON
565       P:01D2 P:01D2 08F4BF            MOVEP             #$2007,X:IPR            ; Enable TIMER interrupts
                        002007
566       P:01D4 P:01D4 0C0000            JMP     <XMT_CHK                          ; Go transmit reply
567    
568                             ; Or, return with an error message
569       P:01D5 P:01D5 568000  PERR      MOVE              X:<HOST,A
570       P:01D6 P:01D6 565B00            MOVE              A,X:(R3)+               ; Header to host
571       P:01D7 P:01D7 568000            MOVE              X:<ERR,A
572       P:01D8 P:01D8 565B00            MOVE              A,X:(R3)+               ; Power is ON
573       P:01D9 P:01D9 08F4BF            MOVEP             #$2007,X:IPR            ; Enable TIMER interrupts
                        002007
574       P:01DB P:01DB 0C0000            JMP     <XMT_CHK                          ; Go transmit reply
575    
576                             ; Delay between power control board instructions
577       P:01DC P:01DC 06A08F  PWR_DLY   DO      #4000,L_DLY
                        0001DE
578       P:01DE P:01DE 000000            NOP
579                             L_DLY
580       P:01DF P:01DF 00000C            RTS
581    
582                             WRITE_TO_DAC2
583       P:01E0 P:01E0 56DC00            MOVE              X:(R4)+,A               ; DAC Number to change
584       P:01E1 P:01E1 09CC36            MOVEP             A1,Y:WR_DAC2            ; Update DAC and record of it
585       P:01E2 P:01E2 5C0400            MOVE                          A1,Y:<DAC2
586       P:01E3 P:01E3 0C0000            JMP     <FINISH
587                             WRITE_TO_DAC3
588       P:01E4 P:01E4 56DC00            MOVE              X:(R4)+,A               ; Value to set
589       P:01E5 P:01E5 09CC37            MOVEP             A1,Y:WR_DAC3            ; Update DAC and record of it
590       P:01E6 P:01E6 5C0500            MOVE                          A1,Y:<DAC3
591       P:01E7 P:01E7 0C0000            JMP     <FINISH
592    
593    
594    
595    
596                             ; Start an exposure by first issuing a 'CLR' to the timing board
597                             START_EX
598    
599                             ;       MOVE    X:<TIMING,A
600                             ;       MOVE    A,X:(R3)+       ; Header from Utility to timing
601                             ;       MOVE    Y:<NCL,A        ; Move no clear command into accumulator
602                             ;       MOVE    A,X:(R3)+       ; Setup the exposure without flushing the CCD
603                             ;       MOVE    #DONECLR,N4     ; Set internal jump address after 'DON'
604                             ;       JMP     <XMT_CHK        ; Transmit these
605    
606                             ; Come to here after timing board has signaled that clearing is done
607                             DONECLR
608                             ;       BSET    #STRT_EX,X:<STATUS
609                             ;       BSET    #ST_EX,X:<STATUS ; Exposure is in progress
610                             ;       MOVE    X:<HOST,A
611                             ;       MOVE    A,X:(R3)+
612                             ;       MOVE    X:<DON,A
613                             ;       MOVE    A,X:(R3)+
614                             ;       JMP     <XMT_CHK        ; Issue a 'DON' - exposure has begun
615    
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 12



616                             PAUSE
617                             ;       BCLR    #ST_EX,X:<STATUS ; Take out of exposing mode
618                             ;        JSSET   #OPT_SH,X:<OPTIONS,CSHUT ; Close shutter if needed
619       P:01E8 P:01E8 0C0000            JMP     <FINISH                           ; Issue 'DON' and get next command
620    
621                             RESUME
622                             ;       BSET    #ST_EX,X:<STATUS ; Put in exposing mode
623                             ;       JSSET   #OPT_SH,X:<OPTIONS,OSHUT ; Open shutter if needed
624       P:01E9 P:01E9 0C0000            JMP     <FINISH                           ; Issue 'DON' and get next command
625    
626                             ABORT
627                             ;       JSR     <CSHUT          ; To be sure
628                             ;       BCLR    #ST_EX,X:<STATUS ; Take out of exposing mode
629                             ;       BCLR    #CONT_EX,X:<STATUS ; Take out of continuous exposing mode
630                             ;       MOVE    X:<TIMING,A
631                             ;       MOVE    A,X:(R3)+       ; Header from Utility to timing
632                             ;       MOVE    Y:<RDC,A
633                             ;       MOVE    A,X:(R3)+       ; Read out the last frame
634       P:01EA P:01EA 0C0000            JMP     <FINISH                           ; Issue 'DON' and get next command
635    
636                             ; A 'DON' reply has been received in response to a command issued by
637                             ;    the Utility board. Read the X:STATUS bits in responding to it.
638    
639                             ; Test if an internal program jump is needed after receiving a 'DON' reply
640       P:01EB P:01EB 239000  PR_DONE   MOVE              N4,R0                   ; Get internal jump address
641       P:01EC P:01EC 3C0000            MOVE              #<START,N4              ; Set internal jump address to default
642       P:01ED P:01ED 0AE080            JMP     (R0)                              ; Jump to the internal jump address
643    
644                             ; Check for program overflow - its hard to overflow since this application
645                             ;   can be very large indeed
646                                       IF      @CVS(N,*)>APL_XY
648                                       ENDIF                                     ;  will not be overwritten
649    
650                             ; Command table resident in X: data memory
651                             ;  The last part of the command table is not defined for "bootrom"
652                             ;     because it contains application-specific commands
653    
654                                       IF      @SCP("HOST","HOST")
655       X:00C0 X:00C0                   ORG     X:COM_TBL,X:COM_TBL
656                                       ELSE                                      ; Memory offsets for generating EEPROMs
658                                       ENDIF
659       X:00C0 X:00C0                   DC      'PON',PWR_ON                      ; Power ON
660       X:00C2 X:00C2                   DC      'POF',PWR_OFF                     ; Power OFF
661       X:00C4 X:00C4                   DC      'SEX',START_EX                    ; Start exposure
662       X:00C6 X:00C6                   DC      'PEX',PAUSE                       ; Pause exposure
663       X:00C8 X:00C8                   DC      'REX',RESUME                      ; Resume exposure
664       X:00CA X:00CA                   DC      'AEX',ABORT                       ; Abort exposure
665       X:00CC X:00CC                   DC      'OSH',OPEN                        ; Open shutter
666       X:00CE X:00CE                   DC      'CSH',CLOSE                       ; Close shutter
667       X:00D0 X:00D0                   DC      'DON',PR_DONE                     ; Process DON reply
668       X:00D2 X:00D2                   DC      'WD2',WRITE_TO_DAC2               ;  Write a value to the DAC
669       X:00D4 X:00D4                   DC      'WD3',WRITE_TO_DAC3               ;
670       X:00D6 X:00D6                   DC      'INF',GET_INFO                    ; Info/version command
671       X:00D8 X:00D8                   DC      0,START,0,START
672       X:00DC X:00DC                   DC      0,START,0,START
673    
674                             ; Y: parameter table definitions, containing no "bootrom" definitions
675                                       IF      @SCP("HOST","HOST")
676       Y:0000 Y:0000                   ORG     Y:0,Y:0                           ; Download address
677                                       ELSE
679                                       ENDIF
680       Y:0000 Y:0000         DIG_IN    DC      0                                 ; Values of 16 digital input lines
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 13



681       Y:0001 Y:0001         DIG_OUT   DC      0                                 ; Values of 16 digital output lines
682                             ;DAC0    DC      0       ; Table of four DAC values to be output
683                             ;DAC1    DC      1000
684       Y:0002 Y:0002         DAC0      DC      0000                              ; Table of four DAC values to be output
685       Y:0003 Y:0003         DAC1      DC      0000
686       Y:0004 Y:0004         DAC2      DC      2048
687       Y:0005 Y:0005         DAC3      DC      2048
688       Y:0006 Y:0006         NUM_AD    DC      16                                ; Number of inputs to A/D converter
689       Y:0007 Y:0007         AD_IN     DC      0,0,0,0,0,0,0,0
690       Y:000F Y:000F                   DC      0,0,0,0,0,0,0,0                   ; Table of 16 A/D values
691                              EL_TIM_MSECONDS
692       Y:0017 Y:0017                   DC      0                                 ; Number of milliseconds elapsed
693       Y:0018 Y:0018         TGT_TIM   DC      6000                              ; Number of milliseconds desired in exposure
694       Y:0019 Y:0019         U_CCDT    DC      $C20                              ; Upper range of CCD temperature control loop
695       Y:001A Y:001A         L_CCDT    DC      $C50                              ; Lower range of CCD temperature control loop
696       Y:001B Y:001B         K_CCDT    DC      85                                ; Constant of proportionality for CCDT control
697       00000C                A_CCDT    EQU     AD_IN+5                           ; Address of CCD temperature in A/D table
698       00000D                B_CCDT    EQU     AD_IN+6                           ; Address of Cold Head temperature in A/D table
699       Y:001C Y:001C         T_CCDT    DC      $C00                              ; Target CCD T for small increment algorithmn
700       Y:001D Y:001D         T_COEFF   DC      $70                               ; Coefficient for difference in temperatures
701       Y:001E Y:001E         DAC0_LS   DC      0                                 ; Least significant part of heater voltage
702    
703                             ; Define power supply turn-on variables
704                                       IF      @SCP("POWER","R6")
706                                       ELSE
707       Y:001F Y:001F         T_HV      DC      $4D0                              ; Target HV supply voltage for Rev 2 or 3 boards
708                                       ENDIF
709       Y:0020 Y:0020         K_HV      DC      $080                              ; Tolerance of HV supply voltage
710       Y:0021 Y:0021         T_P15     DC      $5C0                              ; Target +15 volts supply voltage
711       Y:0022 Y:0022         K_P15     DC      $080                              ; Tolerance of +15 volts supply voltage
712       Y:0023 Y:0023         T_M15     DC      $A40                              ; Target -15 volts supply voltage
713       Y:0024 Y:0024         K_M15     DC      $080                              ; Tolerance of -15 volts supply voltage
714       Y:0025 Y:0025         I_HV      DC      0                                 ; Initial value of HV
715       Y:0026 Y:0026         I_P15     DC      0                                 ; Initial value of +15 volts
716       Y:0027 Y:0027         I_M15     DC      0                                 ; Initial value of -15 volts
717    
718                             ; Define some command names
719       Y:0028 Y:0028         CLR       DC      'CLR'                             ; Clear CCD
720       Y:0029 Y:0029         RDC       DC      'RDC'                             ; Readout CCD
721       Y:002A Y:002A         ABR       DC      'ABR'                             ; Abort readout
722       Y:002B Y:002B         OSH       DC      'OSH'                             ; Open shutter connected to timing board
723       Y:002C Y:002C         CSH       DC      'CSH'                             ; Close shutter connected to timing board
724       Y:002D Y:002D         POK       DC      'POK'                             ; Message to host - power in OK
725       Y:002E Y:002E         PER       DC      'PER'                             ; Message to host - ERROR in power up sequence
726       Y:002F Y:002F         SBV       DC      'SBV'                             ; Message to timing - set bias voltages
727       Y:0030 Y:0030         IDL       DC      'IDL'                             ; Message to timing - put camera in idle mode
728       Y:0031 Y:0031         STP       DC      'STP'                             ; Message to timing - Stop idling
729       Y:0032 Y:0032         NCL       DC      'NCL'                             ; Message to timing - Don't clear the CCD before
 an Exposure
730       Y:0033 Y:0033         DTH       DC      'DTH'                             ; Message to Timing - Dither ccd charge
731    
732                             ; Miscellaneous
733                             ; Heater value has been pegged to the limit given the current limiting resistors
734                             ; as of 2008 Aug 05
735                             ; CC00 now called HTMAX 2010 Oct 15
736    
737       Y:0034 Y:0034         HTMAX     DC      $FFF                              ; Maximum heater voltage so the board doesn't bu
rn up
738                             ;CC00   DC      $FFF    ; Maximum heater voltage so the board doesn't burn up
739                             ;CC00   DC      $C00    ; Maximum heater voltage so the board doesn't burn up
740                             ;CC00   DC      $000            ; Set different max
741       Y:0035 Y:0035         SV_A1     DC      0                                 ; Save register A1 during analog processing
Motorola DSP56000 Assembler  Version 6.2.0   110-10-15  20:46:46  utilappl.s  Page 14



742       Y:0036 Y:0036         SV_SR     DC      0                                 ; Save status register during timer processing
743                              EL_TIM_FRACTION
744       Y:0037 Y:0037                   DC      0                                 ; Fraction of a millisecond of elapsed exposure 
time
745       Y:0038 Y:0038         INCR      DC      $CCCCCC                           ; Exposure time increment = 0.8 milliseconds
746       Y:0039 Y:0039         SH_DEL    DC      0                                 ; Shutter closing time.  No shutter in kepler sy
stem
747       Y:003A Y:003A         TEMP      DC      0                                 ; Temporary storage location for X:PBD word
748       Y:003B Y:003B         DAC1_LS   DC      0                                 ; Least significant part of heater voltage
749       Y:003C Y:003C         TGT_PIC   DC      1                                 ; Target number of pix in series.  Set by bashin
g
750       Y:003D Y:003D         NUMPIC    DC      0                                 ; Number of pix taken so far in this series
751       Y:003E Y:003E         T_COUNT   DC      0                                 ; Number of temp samples this integration
752       Y:003F Y:003F         T_SUM     DC      0                                 ; Running sum of temps
753       Y:0040 Y:0040         T_AVG     DC      0                                 ; Average temp from last integration
754       Y:0041 Y:0041         TH_COUNT  DC      0                                 ; Number of temp samples this integration
755       Y:0042 Y:0042         TH_SUM    DC      0                                 ; Running sum of temps
756       Y:0043 Y:0043         TH_AVG    DC      0                                 ; Average temp from last integration
757       Y:0044 Y:0044         ONE_K     DC      1024                              ; Number of samples in the integration, pwr of 2
758       Y:0045 Y:0045         WRDAC0    DC      0                                 ; DAC0 Voltage
759       Y:0046 Y:0046         WRDAC1    DC      0                                 ; DAC1 Voltage
760       Y:0047 Y:0047         WRDAC2    DC      0                                 ; DAC2 Voltage
761       Y:0048 Y:0048         WRDAC3    DC      0                                 ; DAC3 Voltage
762       Y:0049 Y:0049         DSP_VERS  DC      VERSION                           ; code version  This must remain at locn $49!!
763       Y:004A Y:004A         W_CCDT    DC      $C00                              ; working target temperature, initially = T_CCDT
764       Y:004B Y:004B         TAV_SUM   DC      0                                 ; sum actual temperature
765       Y:004C Y:004C         W_COUNT   DC      0                                 ; count for working temp outer loop
766       Y:004D Y:004D         T_RSQ_0   DC      1                                 ; LSW for ccd dt running squared sum
767       Y:004E Y:004E         T_RSQ_1   DC      1                                 ; MSW for ccd dt running squared sum
768       Y:004F Y:004F         T_LSQ_0   DC      1                                 ; LSW for ccd dt last cycle squared sum
769       Y:0050 Y:0050         T_LSQ_1   DC      1                                 ; MSW for ccd dt last cycle squared sum
770    
771                             ; During the downloading of this application program the one millisecond
772                             ;   timer interrupts are enabled, so the utility board will attempt to execute
773                             ;   the partially downloaded TIMER routine, and crash. A workaround is to
774                             ;   put a RTI as the first instruction of TIMER so it doesn't execute, then
775                             ;   write the correct instruction only after all the rest of the application
776                             ;   program has been downloaded. Here it is -
777    
778       P:0091 P:0091                   ORG     P:APL_ADR+1,P:APL_ADR+1
779       P:0091 P:0091 053679  TIMER1    MOVEC                         SR,Y:<SV_SR ; Save Status Register
780    
781    
782                                ENDSEC                                    ; End of SECTION UTILAPPL
783    
784                      ; End of program
785                                END

0    Errors
0    Warnings


