#! /usr/bin/perl  -w

# Converts a string in ARGV[1] of the form
# Va.b/c[d]   to a 24 bit INF version code with
# 4 6 bit subfields.
#
# 
#
# 23-18  a
# 17-12  b
# 11-06  c
# 05-00  d, or 0x3F if d is unspecified

# It puts a single line on standard output of the form
#
#  VERSION EQU  nnnnn  ;Va.b/c

# which is used by the 56xxx assembler to provide the processed version
# code to the DSP code that implements the INF command.


# Written 2 July 2008  Peter L. Collins Lowell Observatory
# based slightly on the previous (now superseded) version2code script.


sub find_version {
     $name = shift(@_);
#   $name=$ARGV[1];
      if ( $name =~ /^V[0-9]*\.[0-9]*\/[0-9]*.*/) {
          chomp($name);
	  $namev = $name;
	  $namev =~  s/^V//;
	  $v1 = $namev;
	  $v2 = $namev;
	  $v3 = $namev;
	  $v4 = $namev;
	  $v1 =~ s/\..*$//;
	  $v3 =~ s/[0-9]*\.[0-9]*\///;
	  $v2 =~ s/\/.*$//;
	  $v2 =~ s/[0-9]*\.//;
	  $v3=~s/\/.*//;
	  if ( $namev =~ /.*\/.*\/.*/ ) {
             $v3 =~ s/.*\///;
  	     $v4 =~ s/.*[0-9]*\/[0-9]*\///;
	   } else {
  	     $v4 = 63;
	   }
	  $p = ($v1 << 18) | ($v2 << 12) | ($v3 << 6) | $v4;

	  print("; DSP Version\n");
	  print "IVERSION\tEQU\t$p\t; $namev\n\n";
      } else {
      print "BAD VERSION NUMBER: $name\n"
      }
}

sub find_flavor {
	  $namef=shift;
          if ( $namef eq "none" ) {
              print "IFLAVOR\tEQU\t'   '\t ; none \n\n";
          }  else {
            if ( $namef =~ /[A-z][A-z]$/ ) {
	    print "IFLAVOR\tEQU\t'$namef '\t ; $namef\n\n";
	  } else {
	     if ( $namef =~ /[A-z]$/ ) {
	        print "IFLAVOR\tEQU\t'$namef  '\t ; $namef\n\n";
	     } else {
	        print ("BAD FLAVOR: $namef");
	     }
	  }
    }
 }

sub find_time {
   $t = time();    # seconds since 1970
   $t0 = $t & 0xFFFF;
   $t1 = $t >> 16;
   # convert to readable string
   ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $idist)=gmtime($t);
   $year+=1900;
   $mon++;
   $ctime="time: $year $mon $mday  $hour:$min:$sec GMT";
   print "ITIME0\tEQU\t$t0  \t ; lo order $ctime\n\n";
   print "ITIME1\tEQU\t$t1  \t ; hi order $ctime\n\n";

   # get rid of some compiler jessie.
   $year=$wday;
   $year=$idist;
   $year=$yday;
}

sub find_svnrev {
   $routines=shift;
   $svnrev=0;
   $dirty=0;
   while ( $routines =~ /[^ ]/ ) {
      $nextcode = $routines;
      $nextcode =~ s/ [^ ][^ ]*.*$//;
      $svn = readpipe("svn status -v $nextcode | tail -1");
      if ( $svn =~ /[0-9][0-9]* .*[0-9][0-9]*/ ) {
          if ( $svn =~ /^ *M/ ) {
             $dirty = $dirty + 1;
          }
#         print $svn;
         $svn =~ s/^[A-Z]* *[0-9]*[0-9][0-9]*  *//;
	 $svn =~ s/  *.*$//;
#         print $svn;
	 if ( $svn > $svnrev) {  
            $svnrev = $svn; 
         }
      }
      $routines =~ s/^[^ ][^ ]*  *//;
   }
   if ( $dirty gt 0 ) {
      $svnrev += 1000000;
   }
   print "ISVNREV\tEQU\t$svnrev\t ; most recent code svn rev\n\n";
}

$name=$ARGV[0];
#print $ARGV[0];
find_version($name);
$flavor=$ARGV[1];
find_flavor($flavor);
find_time();
$svn=$ARGV[2];
find_svnrev($svn);
