Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 1



1                               COMMENT *
2      
3                        This file is used to generate DSP code for the utility board. It will time
4                             the exposure, operate the shutter, control the CCD temperature and
5                             turn the analog power on. This is Rev. 3.00 software.
6                        Modified 1-12-97 for 10 MHz input clock frequency by adding 2 to elapsed
7                             exposure time rather than one.
8                        Power ON sequence written for Gen II power control board, Rev. 4A
9      
10                       -d HOST 'HOST'  To generate code for downloading to DSP memory.
11                       -d HOST 'ROM'   To generate code for writing to the ROM.
12     
13                               *
14                                 PAGE    132                               ; Printronix page width - 132 columns
15                                                                           ;INCLUDE        "utilversion.s" ; versioning
16                                 INCLUDE "infospec.s"
17                       ; General DSP info field specifications.
18                       ; These values are 'addresses' and used as the argument for the INF command.
19     
20                       GET_VERSION
21        000000                   EQU     0                                 ; IVERSION field
22        000001         GET_FLAVOR EQU    1                                 ; IFLAVOR field
23        000002         GET_TIME0 EQU     2                                 ; ITIME0 field (lo order, time of compile)
24        000003         GET_TIME1 EQU     3                                 ; ITIME1 field (hi order, time of compile)
25        000004         GET_SVNREV EQU    4                                 ; ISVNREV field (highest svn rev if available)
26     
27                                 INCLUDE "utilinfospec.s"
28                       ; UTIL DSP info field specifications.
29                       ; These values are 'addresses' and used as the argument for the INF command.
30     
31                       GET_CAPABLE
32        000100                   EQU     $100                              ; ICAPABLE field (what dsp supports).
33     
34                                 INCLUDE "utilinfo.s"
35                       ; DSP Version
36        04307F         IVERSION  EQU     274559                            ; 1.3/1
37     
38        202020         IFLAVOR   EQU     '   '                             ; none
39     
40        00841C         ITIME0    EQU     33820                             ; lo order time: 2011 8 9  19:1:48 GMT
41     
42        004E41         ITIME1    EQU     20033                             ; hi order time: 2011 8 9  19:1:48 GMT
43     
44        000000         ISVNREV   EQU     0                                 ; most recent code svn rev
45     
46                                 INCLUDE "utilversion.s"
47        000000         VERSION   EQU     0
48                       UTILCAPABLE
49        000000                   EQU     0
50     
51                       ; Name it a section so it doesn't conflict with other application programs
52                                 SECTION UTILAPPL
53     
54                       ;  These are also defined in "utilboot.asm", so be sure they agree
55        000090         APL_ADR   EQU     $90                               ; Starting address of application program
56        000080         BUF_STR   EQU     $80                               ; Starting address of buffers in X:
57        000020         BUF_LEN   EQU     $20                               ; Length of buffers
58        000080         SSI_BUF   EQU     BUF_STR                           ; Starting address of SCI buffer in X:
59        0000A0         COM_BUF   EQU     SSI_BUF+BUF_LEN                   ; Starting address of command buffer in X:
60        0000C0         COM_TBL   EQU     COM_BUF+BUF_LEN                   ; Starting address of command table in X:
61     
62                       ;  Define some useful constants
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 2



63        001EE0         APL_XY    EQU     $1EE0                             ; Starting address in EEPROM of X: and Y: values
64        000046         DLY_MUX   EQU     70                                ; Number of DSP cycles to delay for MUX settling
65        000064         DLY_AD    EQU     100                               ; Number of DSP cycles to delay for A/D settling
66     
67                       ; Assign addresses to port B data register
68        00FFE4         PBD       EQU     $FFE4                             ; Port B Data Register
69        00FFFF         IPR       EQU     $FFFF                             ; Interrupt Priority Register
70     
71                       ;  Addresses of memory mapped components in Y: data memory space
72                       ;  Write addresses first
73        00FFF0         WR_DIG    EQU     $FFF0                             ; was $FFFF  Write Digital output values D00-D15
74        00FFF1         WR_MUX    EQU     $FFF1                             ; Select MUX connected to A/D input - one of 16
75        00FFF2         EN_DIG    EQU     $FFF2                             ; Enable digital outputs
76        00FFF7         WR_DAC3   EQU     $FFF7                             ; Write to DAC#3 D00-D11
77        00FFF6         WR_DAC2   EQU     $FFF6                             ; Write to DAC#2 D00-D11
78        00FFF5         WR_DAC1   EQU     $FFF5                             ; Write to DAC#1 D00-D11
79        00FFF4         WR_DAC0   EQU     $FFF4                             ; Write to DAC#0 D00-D11
80                       ;WR_DAC0        EQU     $FFF6           ; Redirect Heater DAC
81                       ;WR_DAC1        EQU     $FFF7           ; Redirect Heater DAC
82     
83                       ;  Read addresses next
84        00FFF0         RD_DIG    EQU     $FFF0                             ; Read Digital input values D00-D15
85        00FFF1         STR_ADC   EQU     $FFF1                             ; Start ADC conversion, ignore data
86        00FFF2         RD_ADC    EQU     $FFF2                             ; Read A/D converter value D00-D11
87        00FFF7         WATCH     EQU     $FFF7                             ; Watch dog timer - tell it that DSP is alive
88     
89                       ;  Bit definitions of STATUS word
90        000000         ST_SRVC   EQU     0                                 ; Set if ADC routine needs executing
91        000001         ST_EX     EQU     1                                 ; Set if timed exposure is in progress
92        000002         ST_SH     EQU     2                                 ; Set if shutter is open
93        000003         ST_READ   EQU     3                                 ; Set if a readout needs to be initiated
94        000004         STRT_EX   EQU     4                                 ; Set to indicate start of exposure
95        000007         DITHMODE  EQU     7                                 ; Set for dithering during exp.  Bash to set
96        000008         CONT_EX   EQU     8                                 ; Set to indicate cont. exp mode. Bash to set
97     
98                       ; Bit definitions of software OPTIONS word
99        000000         OPT_SH    EQU     0                                 ; Set to open and close shutter.  Bash to set
100    
101                      ;  Bit definitions of Port B = Host Processor Interface
102       000000         PWR_EN1   EQU     0                                 ; Power enable bit ONE - Output
103       000001         PWR_EN0   EQU     1                                 ; Power enable bit ZERO  - Output
104       000002         PWRST     EQU     2                                 ; Reset power conditioner counter - Output
105       000003         SHUTTER   EQU     3                                 ; Control shutter - Output
106       000004         IRQ_T     EQU     4                                 ; Request interrupt service from timing board - Output
107       000005         SYS_RST   EQU     5                                 ; Reset entire system - Output
108       000008         WATCH_T   EQU     8                                 ; Processed watchdog signal from timing board - Input
109    
110                      ;**************************************************************************
111                      ;                                                                         *
112                      ;    Register assignments                                                 *
113                      ;        R1 - Address of SCI receiver contents                            *
114                      ;        R2 - Address of processed SCI receiver contents                  *
115                      ;        R3 - Pointer to current top of command buffer                    *
116                      ;        R4 - Pointer to processed contents of command buffer             *
117                      ;        N4 - Address for internal jumps after receiving 'DON' replies    *
118                      ;        R0, R5, R6, A, X0, X1 - For use by program only                  *
119                      ;        R7 - For use by SCI ISR only                                     *
120                      ;        Y0, Y1, and B - For use by timer ISR only. If any of these       *
121                      ;               registers are needed elsewhere they must be saved and     *
122                      ;               restored in the TIMER ISR.                                *
123                      ;**************************************************************************
124    
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 3



125                      ; Specify execution and load addresses.
126       P:0090 P:0090                   ORG     P:APL_ADR,P:APL_ADR
127    
128                             ; The TIMER addresses must be defined here and SERVICE must follow to match
129                             ;   up with the utilboot code
130       P:0090 P:0090 0C00CA            JMP     <SERVICE                          ; Millisecond timer interrupt
131    
132       P:0091 P:0091 000004  TIMER     RTI                                       ; RTI for now so downloading works
133       P:0092 P:0092 0A0160            BSET    #0,Y:<DIG_OUT                     ; FIDUCIAL PULSE
134       P:0093 P:0093 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
135       P:0095 P:0095 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
136       P:0097 P:0097 0A0081            JCLR    #ST_EX,X:STATUS,NO_TIM            ; Continue on if we're not exposing
                        0000C1
137       P:0099 P:0099 0A0084            JCLR    #STRT_EX,X:<STATUS,EX_STRT        ; Skip if exposure has been started
                        0000A4
138       P:009B P:009B 0A0004            BCLR    #STRT_EX,X:<STATUS                ; Clear status = "not start of exposure"
139       P:009C P:009C 20001B            CLR     B
140       P:009D P:009D 5F1700            MOVE                          B,Y:<EL_TIM_MSECONDS ; Initialize elapsed time
141       P:009E P:009E 5F3700            MOVE                          B,Y:<EL_TIM_FRACTION
142       P:009F P:009F 5F3D00            MOVE                          B,Y:<NUMPIC ; clear number of pix in series
143       P:00A0 P:00A0 0A0080            JCLR    #OPT_SH,X:<OPTIONS,NO_TIM         ; Don't open shutter if a dark frame
                        0000C1
144       P:00A2 P:00A2 0D014A            JSR     <OSHUT                            ; Open shutter if start of exposure
145       P:00A3 P:00A3 0C00C1            JMP     <NO_TIM                           ; Don't increment EL_TIM at first
146                             EX_STRT
147       P:00A4 P:00A4 4EB81B            CLR     B                     Y:<INCR,Y0  ; INCR = 0.8 milli? seconds
148       P:00A5 P:00A5 478000            MOVE              X:<ZERO,Y1
149       P:00A6 P:00A6 5D9700            MOVE                          Y:<EL_TIM_MSECONDS,B1 ; Get elapsed time
150       P:00A7 P:00A7 59B700            MOVE                          Y:<EL_TIM_FRACTION,B0
151       P:00A8 P:00A8 4F9838            ADD     Y,B                   Y:<TGT_TIM,Y1 ; EL_TIM = EL_TIM + 0.8 milliseconds
152       P:00A9 P:00A9 593700            MOVE                          B0,Y:<EL_TIM_FRACTION
153       P:00AA P:00AA 5D177C            SUB     Y1,B                  B1,Y:<EL_TIM_MSECONDS
154       P:00AB P:00AB 0E90C1            JLT     <NO_TIM                           ; If (EL .GE. TGT) we've timed out
155    
156                             ; Close the shutter at once if needed
157       P:00AC P:00AC 0A0080            JCLR    #OPT_SH,X:OPTIONS,NO_SHUT         ; Close the shutter only if needed
                        0000B0
158       P:00AE P:00AE 0AA423            BSET    #SHUTTER,X:PBD                    ; Set Port B bit #3 to close shutter
159       P:00AF P:00AF 0A0022            BSET    #ST_SH,X:<STATUS                  ; Set status to mean shutter closed
160    
161                             ; Wait SH_DLY milliseconds for the shutter to fully close before reading out
162                             NO_SHUT
163       P:00B0 P:00B0 4FB900            MOVE                          Y:<SH_DEL,Y1 ; Get shutter closing time
164       P:00B1 P:00B1 20007C            SUB     Y1,B                              ; B = EL_TIM - (TGT_TIM + SH_DEL)
165       P:00B2 P:00B2 0E90C1            JLT     <NO_TIM                           ; If (EL .GE. TGT+DEL) we've timed out
166       P:00B3 P:00B3 0A0023            BSET    #ST_READ,X:<STATUS                ; Set so a readout will be initiated
167       P:00B4 P:00B4 20001B            CLR     B
168       P:00B5 P:00B5 5F1700            MOVE                          B,Y:<EL_TIM_MSECONDS ; Initialize elapsed time
169       P:00B6 P:00B6 5F3700            MOVE                          B,Y:<EL_TIM_FRACTION ; for next image in series
170       P:00B7 P:00B7 59BD00            MOVE                          Y:<NUMPIC,B0 ; Increment NUMPIC
171       P:00B8 P:00B8 000009            INC     B
172       P:00B9 P:00B9 593D00            MOVE                          B0,Y:<NUMPIC
173       P:00BA P:00BA 4EF000            MOVE                          Y:TGT_PIC,Y0 ; Get target number of pix
                        00003C
174       P:00BC P:00BC 478000            MOVE              X:<ZERO,Y1
175       P:00BD P:00BD 20003C            SUB     Y,B
176       P:00BE P:00BE 0E90C1            JLT     <NO_TIM                           ; If NUMPIC .GE. TGT_PIC, done
177       P:00BF P:00BF 0A0001            BCLR    #ST_EX,X:<STATUS                  ; No longer exposing
178       P:00C0 P:00C0 0A0008            BCLR    #CONT_EX,X:<STATUS                ; or taking a series
179    
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 4



180                             ; Return from interrupt
181                             NO_TIM
182       P:00C1 P:00C1 0A0020            BSET    #ST_SRVC,X:<STATUS                ; SERVICE needs executing
183       P:00C2 P:00C2 0A0140            BCLR    #0,Y:<DIG_OUT                     ; FIDUCIAL PULSE
184       P:00C3 P:00C3 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
185       P:00C5 P:00C5 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
186       P:00C7 P:00C7 05B679            MOVEC                         Y:<SV_SR,SR ; Restore Status Register
187       P:00C8 P:00C8 000000            NOP
188       P:00C9 P:00C9 000004            RTI                                       ; Return from TIMER interrupt
189    
190                             ; This long subroutine is executed every millisecond, but isn't an ISR so
191                             ;   that care need not be taken to preserve registers and stacks.
192                             SERVICE
193       P:00CA P:00CA 0A0000            BCLR    #ST_SRVC,X:<STATUS                ; Clear request to execute SERVICE
194       P:00CB P:00CB 0A0083            JCLR    #ST_READ,X:<STATUS,DTH_CHK        ; Initiate readout?
                        0000D5
195    
196                             ; Extra call if using the VME interface board
197                                       IF      @SCP("INTERFACE","VME")
202                                       ENDIF
203    
204       P:00CD P:00CD 568000            MOVE              X:<TIMING,A
205       P:00CE P:00CE 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
206       P:00CF P:00CF 5EA900            MOVE                          Y:<RDC,A
207       P:00D0 P:00D0 565B00            MOVE              A,X:(R3)+               ; Start reading out the CCD
208       P:00D1 P:00D1 0A0003            BCLR    #ST_READ,X:<STATUS                ; Readout will be initiated
209       P:00D2 P:00D2 0A00A8            JSET    #CONT_EX,X:STATUS,BAILOUT         ; Don't clear ST_EX if series
                        0000D5
210       P:00D4 P:00D4 0A0001            BCLR    #ST_EX,X:<STATUS                  ; Exposure is no longer in progress
211                             BAILOUT
212                             ;       MOVEP   Y:WATCH,X0              ; Reset Watchdog Timer
213                             ;       RTS                             ; Return now to save time
214    
215                             ; If we are supposed to dither, put a DTH command to timer on queue
216       P:00D5 P:00D5 0A0087  DTH_CHK   JCLR    #DITHMODE,X:<STATUS,UPD_DIG
                        0000DB
217       P:00D7 P:00D7 568000            MOVE              X:<TIMING,A
218       P:00D8 P:00D8 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
219       P:00D9 P:00D9 5EB300            MOVE                          Y:<DTH,A
220       P:00DA P:00DA 565B00            MOVE              A,X:(R3)+               ; Dither command to queue
221    
222                             ; Update all the digital input/outputs; reset watchdog timer
223       P:00DB P:00DB 0970F0  UPD_DIG   MOVEP             Y:RD_DIG,Y:DIG_IN       ; Read 16 digital inputs
                        000000
224       P:00DD P:00DD 0A0161            BSET    #1,Y:<DIG_OUT                     ; FIDUCIAL PULSE
225       P:00DE P:00DE 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
226       P:00E0 P:00E0 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
227       P:00E2 P:00E2 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
228                             ; Update the 4 DACs
229       P:00E3 P:00E3 09F0F4            MOVEP             Y:DAC0,Y:WR_DAC0        ; Write to DAC0
                        000002
230       P:00E5 P:00E5 09F0F5            MOVEP             Y:DAC1,Y:WR_DAC1        ; Write to DAC1
                        000003
231       P:00E7 P:00E7 09F0F6            MOVEP             Y:DAC2,Y:WR_DAC2        ; Write to DAC2
                        000004
232       P:00E9 P:00E9 09F0F7            MOVEP             Y:DAC3,Y:WR_DAC3        ; Write to DAC3
                        000005
233    
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 5



234                             ; Analog Input processor - read the 16 A/D inputs
235       P:00EB P:00EB 448000            MOVE              X:<ONE,X0               ; For incrementing accumulator to select MUX
236       P:00EC P:00EC 350713            CLR     A         #<AD_IN,R5              ; Will contain MUX number
237       P:00ED P:00ED 060640            DO      Y:NUM_AD,LOOP_AD                  ; Loop over each A/D converter input
                        0000FC
238       P:00EF P:00EF 09CE31            MOVEP             A,Y:WR_MUX              ; Select MUX input
239       P:00F0 P:00F0 064680            DO      #DLY_MUX,L_AD1                    ; Wait for the MUX to settle
                        0000F2
240       P:00F2 P:00F2 5C3500            MOVE                          A1,Y:<SV_A1 ; DO needed so SSI input can come in
241                             L_AD1
242       P:00F3 P:00F3 094531            MOVEP             Y:STR_ADC,X1            ; Start A/D conversion - dummy read
243       P:00F4 P:00F4 066480            DO      #DLY_AD,L_AD2                     ; Wait for the A/D to settle
                        0000F6
244       P:00F6 P:00F6 458000            MOVE              X:<CFFF,X1
245                             L_AD2
246       P:00F7 P:00F7 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
247       P:00F8 P:00F8 200066            AND     X1,A                              ; A/D is only valid to 12 bits
248       P:00F9 P:00F9 0BCC4B            BCHG    #11,A1                            ; Change 12-bit 2's complement to unipolar
249       P:00FA P:00FA 5C5D00            MOVE                          A1,Y:(R5)+  ; Put the A/D value in the table
250       P:00FB P:00FB 5CB500            MOVE                          Y:<SV_A1,A1 ; Restore A1 = MUX number
251       P:00FC P:00FC 200040            ADD     X0,A                              ; Increment A = MUX number by one
252                             LOOP_AD
253       P:00FD P:00FD 09F0B1            MOVEP             X:ONE,Y:WR_MUX          ; Sample +5V when idle
                        000000
254    
255                             ; Control the CCD Temperature
256                             ; The algorithmn assumes a reverse biased diode whose A/D count A_CCDT
257                             ;   is proportional to temperature. Don't start controlling temperature
258                             ;   until it falls below target temperature. ADUs decrease with temp.
259                             ; Changed to run an RTD where the ADUs increase with temperature.
260                             ; Modified to average a bunch of temps, then change the heater current
261                             ; For initialization, depend on assembler setting to zero.
262       P:00FF P:00FF 4C8D00            MOVE                          Y:<B_CCDT,X0 ; Get Cold Head temperature
263       P:0100 P:0100 58F000            MOVE                          Y:TH_SUM,A0 ; Get CH running Sum
                        000042
264       P:0102 P:0102 548000            MOVE              X:<ZERO,A1
265       P:0103 P:0103 218500            MOVE              A1,X1
266       P:0104 P:0104 200020            ADD     X,A                               ; Add CH to running sum
267       P:0105 P:0105 587000            MOVE                          A0,Y:TH_SUM ; and store it
                        000042
268       P:0107 P:0107 58F000            MOVE                          Y:TH_COUNT,A0 ; Get the count
                        000041
269       P:0109 P:0109 000008            INC     A                                 ; Add 1
270       P:010A P:010A 587000            MOVE                          A0,Y:TH_COUNT ; and store it
                        000041
271       P:010C P:010C 4CF000            MOVE                          Y:ONE_K,X0  ; Get number to average
                        000044
272       P:010E P:010E 200024            SUB     X,A
273       P:010F P:010F 0E911C            JLT     <C_TEMP                           ; If T_COUNT .GE. 1024, find avg, update
274       P:0110 P:0110 58F000            MOVE                          Y:TH_SUM,A0 ; Here if done.  Get final sum
                        000042
275       P:0112 P:0112 060AA0            REP     #10
276       P:0113 P:0113 200022            ASR     A                                 ; Averaging the temperature
277       P:0114 P:0114 587000            MOVE                          A0,Y:TH_AVG ; Save the average temperature
                        000043
278       P:0116 P:0116 210400            MOVE              A0,X0                   ; and stick in X0
279       P:0117 P:0117 200013            CLR     A                                 ; Now clear sum and count
280       P:0118 P:0118 587000            MOVE                          A0,Y:TH_SUM
                        000042
281       P:011A P:011A 587000            MOVE                          A0,Y:TH_COUNT
                        000041
282                             ; This is section handles the CCD temperature. It reads the temp then
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 6



283                             ; averages and applies the heater current if necessary
284                             C_TEMP
285       P:011C P:011C 4C8C00            MOVE                          Y:<A_CCDT,X0 ; Get actual CCD temperature
286       P:011D P:011D 58BF00            MOVE                          Y:<T_SUM,A0 ; Get the running sum
287       P:011E P:011E 548000            MOVE              X:<ZERO,A1
288       P:011F P:011F 218500            MOVE              A1,X1
289       P:0120 P:0120 200020            ADD     X,A                               ; add on this temperature
290       P:0121 P:0121 583F00            MOVE                          A0,Y:<T_SUM ; and store it
291       P:0122 P:0122 58BE00            MOVE                          Y:<T_COUNT,A0 ; Get the count
292       P:0123 P:0123 000008            INC     A                                 ; Add 1
293       P:0124 P:0124 583E00            MOVE                          A0,Y:<T_COUNT ; and store it
294       P:0125 P:0125 4CF000            MOVE                          Y:ONE_K,X0  ; Get number to average
                        000044
295       P:0127 P:0127 200024            SUB     X,A
296       P:0128 P:0128 0E9144            JLT     <SKIP_T                           ; If T_COUNT .GE. 1024, find avg, update
297       P:0129 P:0129 58BF00            MOVE                          Y:<T_SUM,A0 ; Here if done.  Get final sum
298       P:012A P:012A 060AA0            REP     #10
299       P:012B P:012B 200022            ASR     A                                 ; Averaging the temperature
300       P:012C P:012C 587000            MOVE                          A0,Y:T_AVG  ; Save the average temperature
                        000040
301       P:012E P:012E 210400            MOVE              A0,X0                   ; and stick in X0
302       P:012F P:012F 200013            CLR     A                                 ; Now clear sum and count
303       P:0130 P:0130 583F00            MOVE                          A0,Y:<T_SUM
304       P:0131 P:0131 583E00            MOVE                          A0,Y:<T_COUNT
305       P:0132 P:0132 5E9C00            MOVE                          Y:<T_CCDT,A ; Get target CCD temperature
306       P:0133 P:0133 200044            SUB     X0,A
307       P:0134 P:0134 21C400            MOVE              A,X0                    ; X0 now target - actual
308       P:0135 P:0135 4D9D00            MOVE                          Y:<T_COEFF,X1
309       P:0136 P:0136 2000A0            MPY     X0,X1,A                           ; A = (target - actual) * T_COEFF
310       P:0137 P:0137 200022            ASR     A                                 ; Shift right to fix *2
311       P:0138 P:0138 4CB400            MOVE                          Y:<CC00,X0  ; Heats greater than this are not allowed
312       P:0139 P:0139 210C00            MOVE              A0,A1                   ;
313       P:013A P:013A 200045            CMP     X0,A
314       P:013B P:013B 0E913E            JLT     <TST_LOW
315       P:013C P:013C 208E00            MOVE              X0,A                    ; Make it the maximum heat
316       P:013D P:013D 0C0141            JMP     <WR_DAC
317                             TST_LOW
318       P:013E P:013E 200003            TST     A                                 ; Heats of less than zero are not allowed
319       P:013F P:013F 0E7141            JGT     <WR_DAC
320       P:0140 P:0140 568000            MOVE              X:<ZERO,A               ; No heat
321                             WR_DAC
322       P:0141 P:0141 09CC34            MOVEP             A1,Y:WR_DAC0            ; Update DAC and record of it
323       P:0142 P:0142 5C0200            MOVE                          A1,Y:<DAC0
324       P:0143 P:0143 5C1E00            MOVE                          A1,Y:<DAC0_LS
325                             SKIP_T
326       P:0144 P:0144 0A0141            BCLR    #1,Y:<DIG_OUT                     ; FIDUCIAL PULSE
327       P:0145 P:0145 09F4B2            MOVEP             #1,Y:EN_DIG             ; Enable digital outputs
                        000001
328       P:0147 P:0147 09F0F0            MOVEP             Y:DIG_OUT,Y:WR_DIG      ; Write 16 digital outputs
                        000001
329       P:0149 P:0149 00000C            RTS                                       ; Return from subroutine SERVICE call
330    
331                             ; Shutter support subroutines for the TIMER executive
332                             ; Also support shutter connection to timing board for now.
333       P:014A P:014A 0AA403  OSHUT     BCLR    #SHUTTER,X:PBD                    ; Clear Port B bit #3 to open shutter
334       P:014B P:014B 0A0002            BCLR    #ST_SH,X:<STATUS                  ; Clear status bit to mean shutter open
335       P:014C P:014C 00000C            RTS
336    
337       P:014D P:014D 0AA423  CSHUT     BSET    #SHUTTER,X:PBD                    ; Set Port B bit #3 to close shutter
338       P:014E P:014E 0A0022            BSET    #ST_SH,X:<STATUS                  ; Set status to mean shutter closed
339       P:014F P:014F 00000C            RTS
340    
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 7



341                             ; These are called directly by command, so need to call subroutines in turn
342       P:0150 P:0150 0D014A  OPEN      JSR     OSHUT                             ; Call open shutter subroutine
343       P:0151 P:0151 0C0000            JMP     <FINISH                           ; Send 'DON' reply
344       P:0152 P:0152 0D014D  CLOSE     JSR     CSHUT                             ; Call close shutter subroutine
345       P:0153 P:0153 0C0000            JMP     <FINISH                           ; Send 'DON' reply
346    
347    
348                             ;       Process INF according to the single addressing parameter
349                             GET_INFO
350       P:0154 P:0154 56DC00            MOVE              X:(R4)+,A               ; 0-4 is generic, >= 0x100 tim specific
351       P:0155 P:0155 44F400            MOVE              #IVERSION,X0
                        04307F
352       P:0157 P:0157 46F400            MOVE              #>GET_VERSION,Y0
                        000000
353       P:0159 P:0159 200055            CMP     Y0,A
354       P:015A P:015A 0EA000            JEQ     <FINISH1
355       P:015B P:015B 44F400            MOVE              #IFLAVOR,X0
                        202020
356       P:015D P:015D 46F400            MOVE              #>GET_FLAVOR,Y0
                        000001
357       P:015F P:015F 200055            CMP     Y0,A
358       P:0160 P:0160 0EA000            JEQ     <FINISH1
359       P:0161 P:0161 44F400            MOVE              #ITIME0,X0
                        00841C
360       P:0163 P:0163 46F400            MOVE              #>GET_TIME0,Y0
                        000002
361       P:0165 P:0165 200055            CMP     Y0,A
362       P:0166 P:0166 0EA000            JEQ     <FINISH1                          ; Is it Time0?
363       P:0167 P:0167 44F400            MOVE              #ITIME1,X0
                        004E41
364       P:0169 P:0169 46F400            MOVE              #>GET_TIME1,Y0
                        000003
365       P:016B P:016B 200055            CMP     Y0,A
366       P:016C P:016C 0EA000            JEQ     <FINISH1                          ; Is it Time1?
367       P:016D P:016D 240000            MOVE              #ISVNREV,X0
368       P:016E P:016E 46F400            MOVE              #>GET_SVNREV,Y0
                        000004
369       P:0170 P:0170 200055            CMP     Y0,A
370       P:0171 P:0171 0EA000            JEQ     <FINISH1                          ; Is it Svn rev?
371       P:0172 P:0172 240000            MOVE              #UTILCAPABLE,X0
372       P:0173 P:0173 46F400            MOVE              #>GET_CAPABLE,Y0
                        000100
373       P:0175 P:0175 200055            CMP     Y0,A
374       P:0176 P:0176 0EA000            JEQ     <FINISH1                          ; Is it Tim Capabilities?
375       P:0177 P:0177 0C0000            JMP     <ERROR
376    
377                             ;  **************  BEGIN  COMMAND  PROCESSING  ***************
378                             ; Power off
379                                       IF      @SCP("POWER","R6")
384                                       ELSE                                      ; Earlier Revision power control boards
385                             PWR_OFF
386       P:0178 P:0178 0AA422            BSET    #PWRST,X:PBD                      ; Reset power control board
387       P:0179 P:0179 0AA402            BCLR    #PWRST,X:PBD
388                                       ENDIF
389       P:017A P:017A 0C0000            JMP     <FINISH                           ; Reply 'DON'
390    
391                             ; Start power-on cycle
392                             ; PWRST must be the same as PWR_EN0 because they're connected on the backplane
393                             PWR_ON
394       P:017B P:017B 08F4BF            MOVEP             #$2000,X:IPR            ; Disable TIMER interrupts
                        002000
395       P:017D P:017D 0A7029            BSET    #9,X:PBDDR                        ; Make sure PWREN is an input
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 8



                        000000
396                                       IF      @SCP("POWER","R6")
400                                       ELSE
401       P:017F P:017F 0AA422            BSET    #PWRST,X:PBD                      ; Reset power control board
402       P:0180 P:0180 061EA0            REP     #30
403       P:0181 P:0181 000000            NOP
404       P:0182 P:0182 0AA402            BCLR    #PWRST,X:PBD
405                                       ENDIF
406    
407                             ; Set up the bias voltage DACs and clock drivers on the analog boards
408       P:0183 P:0183 568000            MOVE              X:<TIMING,A
409       P:0184 P:0184 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
410       P:0185 P:0185 5EB000            MOVE                          Y:<IDL,A
411       P:0186 P:0186 565B00            MOVE              A,X:(R3)+               ; Start up the clock drivers
412       P:0187 P:0187 74F400            MOVE              #PWR_ON1,N4             ; Set internal jump address after 'DON'
                        00018A
413       P:0189 P:0189 0C0000            JMP     <XMT_CHK                          ; Send out commands to timing board
414    
415                             ; Wait a little while for at least one cycle of serial and parallel clocks
416                             PWR_ON1
417       P:018A P:018A 44F400            MOVE              #30000,X0
                        007530
418       P:018C P:018C 06C400            DO      X0,WT_PON1                        ; Wait 20 millisec or so for settling
                        00018F
419       P:018E P:018E 0605A0            REP     #5
420       P:018F P:018F 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
421                             WT_PON1
422       P:0190 P:0190 568000            MOVE              X:<TIMING,A
423       P:0191 P:0191 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
424       P:0192 P:0192 5EB100            MOVE                          Y:<STP,A
425       P:0193 P:0193 565B00            MOVE              A,X:(R3)+               ; Stop the clocks during power on
426       P:0194 P:0194 74F400            MOVE              #PWR_ON2,N4             ; Set internal jump address after 'DON'
                        000197
427       P:0196 P:0196 0C0000            JMP     <XMT_CHK                          ; Send the command to the timing board
428    
429                             ; Now ramp up the low voltages (+/- 6.5V, 16.5V)
430                                       IF      @SCP("POWER","R6")
433                                       ELSE
434       P:0197 P:0197 0AA420  PWR_ON2   BSET    #LVEN,X:PBD                       ; Make sure line is high to start with
435       P:0198 P:0198 06FF80            DO      #255,L_PON1                       ; The power conditioner board wants to
                        00019B
436       P:019A P:019A 0BA400            BCHG    #LVEN,X:PBD                       ;   see 128 H --> L transitions
437       P:019B P:019B 000000            NOP                                       ; Backplane signal settling time delay
438                             L_PON1
439                                       ENDIF
440    
441       P:019C P:019C 0D01E9            JSR     <PWR_DLY                          ; Delay for a little while
442       P:019D P:019D 09F4B1            MOVEP             #2,Y:WR_MUX             ; Select +15V MUX input
                        000002
443       P:019F P:019F 44F400            MOVE              #40000,X0
                        009C40
444       P:01A1 P:01A1 06C400            DO      X0,WT_PON2                        ; Wait 20 millisec or so for settling
                        0001A4
445       P:01A3 P:01A3 0605A0            REP     #5
446       P:01A4 P:01A4 094437            MOVEP             Y:WATCH,X0              ; Reset watchdog timer
447                             WT_PON2
448       P:01A5 P:01A5 094431            MOVEP             Y:STR_ADC,X0            ; Start A/D conversion - dummy read
449       P:01A6 P:01A6 066480            DO      #DLY_AD,L_PON2                    ; Wait for the A/D to settle
                        0001A8
450       P:01A8 P:01A8 448013            CLR     A         X:<CFFF,X0              ; This saves some space
451                             L_PON2
452       P:01A9 P:01A9 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 9



453       P:01AA P:01AA 4CA146            AND     X0,A                  Y:<T_P15,X0 ; A/D is only valid to 12 bits
454    
455                             ; Test that the voltage is in the range abs(initial - target) < margin
456       P:01AB P:01AB 5C2644            SUB     X0,A                  A1,Y:<I_P15
457       P:01AC P:01AC 4CA226            ABS     A                     Y:<K_P15,X0
458       P:01AD P:01AD 200044            SUB     X0,A
459       P:01AE P:01AE 0E71E2            JGT     <PERR                             ; Take corrective action
460    
461       P:01AF P:01AF 09F4B1  TST_M15   MOVEP             #3,Y:WR_MUX             ; Select -15v MUX input
                        000003
462       P:01B1 P:01B1 064680            DO      #DLY_MUX,L_PON3                   ; Wait for the MUX to settle
                        0001B3
463       P:01B3 P:01B3 000000            NOP
464                             L_PON3
465       P:01B4 P:01B4 094431            MOVEP             Y:STR_ADC,X0            ; Start A/D conversion - dummy read
466       P:01B5 P:01B5 066480            DO      #DLY_AD,L_PON4                    ; Wait for the A/D to settle
                        0001B7
467       P:01B7 P:01B7 448013            CLR     A         X:<CFFF,X0              ; Clear A, so put it in DO loop
468                             L_PON4
469       P:01B8 P:01B8 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
470       P:01B9 P:01B9 4CA346            AND     X0,A                  Y:<T_M15,X0 ; A/D is only valid to 12 bits
471    
472                             ; Test that the voltage is in the range abs(initial - target) < margin
473       P:01BA P:01BA 5C2744            SUB     X0,A                  A1,Y:<I_M15
474       P:01BB P:01BB 4CA426            ABS     A                     Y:<K_M15,X0
475       P:01BC P:01BC 200044            SUB     X0,A
476       P:01BD P:01BD 0E71E2            JGT     <PERR
477    
478                             ; Now turn on the high voltage HV (nominally +36 volts)
479                                       IF      @SCP("POWER","R6")
481                                       ELSE
482       P:01BE P:01BE 0AA420  HV_ON     BSET    #HVEN,X:PBD                       ; Make sure line is high to start with
483       P:01BF P:01BF 06FF80            DO      #255,L_PON5                       ; The power conditioner board wants to
                        0001C1
484       P:01C1 P:01C1 0BA400            BCHG    #HVEN,X:PBD                       ;   see 128 H --> L transitions
485                             L_PON5
486                                       ENDIF
487    
488       P:01C2 P:01C2 0D01E9            JSR     <PWR_DLY                          ; Delay for a little while
489       P:01C3 P:01C3 09F4B1            MOVEP             #1,Y:WR_MUX             ; Select high voltage MUX input
                        000001
490       P:01C5 P:01C5 44F400            MOVE              #30000,X0
                        007530
491       P:01C7 P:01C7 06C400            DO      X0,WT_HV                          ; Wait a few millisec for settling
                        0001C9
492       P:01C9 P:01C9 000000            NOP
493                             WT_HV
494       P:01CA P:01CA 094431            MOVEP             Y:STR_ADC,X0            ; Start A/D conversion - dummy read
495       P:01CB P:01CB 066480            DO      #DLY_AD,L_PON6                    ; Wait for the A/D to settle
                        0001CD
496       P:01CD P:01CD 448013            CLR     A         X:<CFFF,X0              ; Clear A, so put it in DO loop
497                             L_PON6
498       P:01CE P:01CE 094C32            MOVEP             Y:RD_ADC,A1             ; Get the A/D value
499       P:01CF P:01CF 4C9F46            AND     X0,A                  Y:<T_HV,X0  ; A/D is only valid to 12 bits
500    
501                             ; Test that the voltage is in the range abs(initial - target) < margin
502       P:01D0 P:01D0 5C2544            SUB     X0,A                  A1,Y:<I_HV
503       P:01D1 P:01D1 4CA026            ABS     A                     Y:<K_HV,X0
504       P:01D2 P:01D2 200044            SUB     X0,A
505       P:01D3 P:01D3 0E71E2            JGT     <PERR                             ; Take corrective action
506    
507                             ; Command the timing board to turn on the analog board DC bias voltages
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 10



508       P:01D4 P:01D4 568000            MOVE              X:<TIMING,A
509       P:01D5 P:01D5 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
510       P:01D6 P:01D6 5EAF00            MOVE                          Y:<SBV,A
511       P:01D7 P:01D7 565B00            MOVE              A,X:(R3)+               ; Set bias voltages
512       P:01D8 P:01D8 74F400            MOVE              #PWR_ON3,N4             ; Set internal jump address after 'DON'
                        0001DB
513       P:01DA P:01DA 0C0000            JMP     <XMT_CHK                          ; Send out commands to timing board
514    
515                             ; Reply with a DONE message to the host computer
516       P:01DB P:01DB 568000  PWR_ON3   MOVE              X:<HOST,A
517       P:01DC P:01DC 565B00            MOVE              A,X:(R3)+               ; Header to host
518       P:01DD P:01DD 568000            MOVE              X:<DON,A
519       P:01DE P:01DE 565B00            MOVE              A,X:(R3)+               ; Power is now ON
520       P:01DF P:01DF 08F4BF            MOVEP             #$2007,X:IPR            ; Enable TIMER interrupts
                        002007
521       P:01E1 P:01E1 0C0000            JMP     <XMT_CHK                          ; Go transmit reply
522    
523                             ; Or, return with an error message
524       P:01E2 P:01E2 568000  PERR      MOVE              X:<HOST,A
525       P:01E3 P:01E3 565B00            MOVE              A,X:(R3)+               ; Header to host
526       P:01E4 P:01E4 568000            MOVE              X:<ERR,A
527       P:01E5 P:01E5 565B00            MOVE              A,X:(R3)+               ; Power is ON
528       P:01E6 P:01E6 08F4BF            MOVEP             #$2007,X:IPR            ; Enable TIMER interrupts
                        002007
529       P:01E8 P:01E8 0C0000            JMP     <XMT_CHK                          ; Go transmit reply
530    
531                             ; Delay between power control board instructions
532       P:01E9 P:01E9 06A08F  PWR_DLY   DO      #4000,L_DLY
                        0001EB
533       P:01EB P:01EB 000000            NOP
534                             L_DLY
535       P:01EC P:01EC 00000C            RTS
536    
537                             WRITE_TO_DAC2
538       P:01ED P:01ED 56DC00            MOVE              X:(R4)+,A               ; DAC Number to change
539       P:01EE P:01EE 09CC36            MOVEP             A1,Y:WR_DAC2            ; Update DAC and record of it
540       P:01EF P:01EF 5C0400            MOVE                          A1,Y:<DAC2
541       P:01F0 P:01F0 0C0000            JMP     <FINISH
542                             WRITE_TO_DAC3
543       P:01F1 P:01F1 56DC00            MOVE              X:(R4)+,A               ; Value to set
544       P:01F2 P:01F2 09CC37            MOVEP             A1,Y:WR_DAC3            ; Update DAC and record of it
545       P:01F3 P:01F3 5C0500            MOVE                          A1,Y:<DAC3
546       P:01F4 P:01F4 0C0000            JMP     <FINISH
547    
548    
549    
550    
551                             ; Start an exposure by first issuing a 'CLR' to the timing board
552                             START_EX
553    
554       P:01F5 P:01F5 568000            MOVE              X:<TIMING,A
555       P:01F6 P:01F6 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
556       P:01F7 P:01F7 5EB200            MOVE                          Y:<NCL,A    ; Move no clear command into accumulator
557       P:01F8 P:01F8 565B00            MOVE              A,X:(R3)+               ; Setup the exposure without flushing the CCD
558       P:01F9 P:01F9 74F400            MOVE              #DONECLR,N4             ; Set internal jump address after 'DON'
                        0001FC
559       P:01FB P:01FB 0C0000            JMP     <XMT_CHK                          ; Transmit these
560    
561                             ; Come to here after timing board has signaled that clearing is done
562                             DONECLR
563       P:01FC P:01FC 0A0024            BSET    #STRT_EX,X:<STATUS
564       P:01FD P:01FD 0A0021            BSET    #ST_EX,X:<STATUS                  ; Exposure is in progress
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 11



565       P:01FE P:01FE 568000            MOVE              X:<HOST,A
566       P:01FF P:01FF 565B00            MOVE              A,X:(R3)+
567       P:0200 P:0200 568000            MOVE              X:<DON,A
568       P:0201 P:0201 565B00            MOVE              A,X:(R3)+
569       P:0202 P:0202 0C0000            JMP     <XMT_CHK                          ; Issue a 'DON' - exposure has begun
570    
571       P:0203 P:0203 0A0001  PAUSE     BCLR    #ST_EX,X:<STATUS                  ; Take out of exposing mode
572       P:0204 P:0204 0B00A0            JSSET   #OPT_SH,X:<OPTIONS,CSHUT          ; Close shutter if needed
                        00014D
573       P:0206 P:0206 0C0000            JMP     <FINISH                           ; Issue 'DON' and get next command
574    
575       P:0207 P:0207 0A0021  RESUME    BSET    #ST_EX,X:<STATUS                  ; Put in exposing mode
576       P:0208 P:0208 0B00A0            JSSET   #OPT_SH,X:<OPTIONS,OSHUT          ; Open shutter if needed
                        00014A
577       P:020A P:020A 0C0000            JMP     <FINISH                           ; Issue 'DON' and get next command
578    
579       P:020B P:020B 0D014D  ABORT     JSR     <CSHUT                            ; To be sure
580       P:020C P:020C 0A0001            BCLR    #ST_EX,X:<STATUS                  ; Take out of exposing mode
581       P:020D P:020D 0A0008            BCLR    #CONT_EX,X:<STATUS                ; Take out of continuous exposing mode
582       P:020E P:020E 568000            MOVE              X:<TIMING,A
583       P:020F P:020F 565B00            MOVE              A,X:(R3)+               ; Header from Utility to timing
584       P:0210 P:0210 5EA900            MOVE                          Y:<RDC,A
585       P:0211 P:0211 565B00            MOVE              A,X:(R3)+               ; Read out the last frame
586       P:0212 P:0212 0C0000            JMP     <FINISH                           ; Issue 'DON' and get next command
587    
588                             ; A 'DON' reply has been received in response to a command issued by
589                             ;    the Utility board. Read the X:STATUS bits in responding to it.
590    
591                             ; Test if an internal program jump is needed after receiving a 'DON' reply
592       P:0213 P:0213 239000  PR_DONE   MOVE              N4,R0                   ; Get internal jump address
593       P:0214 P:0214 3C0000            MOVE              #<START,N4              ; Set internal jump address to default
594       P:0215 P:0215 0AE080            JMP     (R0)                              ; Jump to the internal jump address
595    
596                             ; Check for program overflow - its hard to overflow since this application
597                             ;   can be very large indeed
598                                       IF      @CVS(N,*)>APL_XY
600                                       ENDIF                                     ;  will not be overwritten
601    
602                             ; Command table resident in X: data memory
603                             ;  The last part of the command table is not defined for "bootrom"
604                             ;     because it contains application-specific commands
605    
606                                       IF      @SCP("HOST","HOST")
607       X:00C0 X:00C0                   ORG     X:COM_TBL,X:COM_TBL
608                                       ELSE                                      ; Memory offsets for generating EEPROMs
610                                       ENDIF
611       X:00C0 X:00C0                   DC      'PON',PWR_ON                      ; Power ON
612       X:00C2 X:00C2                   DC      'POF',PWR_OFF                     ; Power OFF
613       X:00C4 X:00C4                   DC      'SEX',START_EX                    ; Start exposure
614       X:00C6 X:00C6                   DC      'PEX',PAUSE                       ; Pause exposure
615       X:00C8 X:00C8                   DC      'REX',RESUME                      ; Resume exposure
616       X:00CA X:00CA                   DC      'AEX',ABORT                       ; Abort exposure
617       X:00CC X:00CC                   DC      'OSH',OPEN                        ; Open shutter
618       X:00CE X:00CE                   DC      'CSH',CLOSE                       ; Close shutter
619       X:00D0 X:00D0                   DC      'DON',PR_DONE                     ; Process DON reply
620       X:00D2 X:00D2                   DC      'WD2',WRITE_TO_DAC2               ;  Write a value to the DAC
621       X:00D4 X:00D4                   DC      'WD3',WRITE_TO_DAC3               ;
622       X:00D6 X:00D6                   DC      'INF',GET_INFO                    ; Info/version command
623       X:00D8 X:00D8                   DC      0,START,0,START
624       X:00DC X:00DC                   DC      0,START,0,START
625    
626                             ; Y: parameter table definitions, containing no "bootrom" definitions
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 12



627                                       IF      @SCP("HOST","HOST")
628       Y:0000 Y:0000                   ORG     Y:0,Y:0                           ; Download address
629                                       ELSE
631                                       ENDIF
632       Y:0000 Y:0000         DIG_IN    DC      0                                 ; Values of 16 digital input lines
633       Y:0001 Y:0001         DIG_OUT   DC      0                                 ; Values of 16 digital output lines
634                             ;DAC0    DC      0       ; Table of four DAC values to be output
635                             ;DAC1    DC      1000
636       Y:0002 Y:0002         DAC0      DC      0000                              ; Table of four DAC values to be output
637       Y:0003 Y:0003         DAC1      DC      0000
638       Y:0004 Y:0004         DAC2      DC      2048
639       Y:0005 Y:0005         DAC3      DC      2048
640       Y:0006 Y:0006         NUM_AD    DC      16                                ; Number of inputs to A/D converter
641       Y:0007 Y:0007         AD_IN     DC      0,0,0,0,0,0,0,0
642       Y:000F Y:000F                   DC      0,0,0,0,0,0,0,0                   ; Table of 16 A/D values
643                              EL_TIM_MSECONDS
644       Y:0017 Y:0017                   DC      0                                 ; Number of milliseconds elapsed
645       Y:0018 Y:0018         TGT_TIM   DC      6000                              ; Number of milliseconds desired in exposure
646       Y:0019 Y:0019         U_CCDT    DC      $C20                              ; Upper range of CCD temperature control loop
647       Y:001A Y:001A         L_CCDT    DC      $C50                              ; Lower range of CCD temperature control loop
648       Y:001B Y:001B         K_CCDT    DC      85                                ; Constant of proportionality for CCDT control
649       00000C                A_CCDT    EQU     AD_IN+5                           ; Address of CCD temperature in A/D table
650       00000D                B_CCDT    EQU     AD_IN+6                           ; Address of Cold Head temperature in A/D table
651       Y:001C Y:001C         T_CCDT    DC      $C00                              ; Target CCD T for small increment algorithmn
652       Y:001D Y:001D         T_COEFF   DC      $70                               ; Coefficient for difference in temperatures
653       Y:001E Y:001E         DAC0_LS   DC      0                                 ; Least significant part of heater voltage
654    
655                             ; Define power supply turn-on variables
656                                       IF      @SCP("POWER","R6")
658                                       ELSE
659       Y:001F Y:001F         T_HV      DC      $4D0                              ; Target HV supply voltage for Rev 2 or 3 boards
660                                       ENDIF
661       Y:0020 Y:0020         K_HV      DC      $080                              ; Tolerance of HV supply voltage
662       Y:0021 Y:0021         T_P15     DC      $5C0                              ; Target +15 volts supply voltage
663       Y:0022 Y:0022         K_P15     DC      $080                              ; Tolerance of +15 volts supply voltage
664       Y:0023 Y:0023         T_M15     DC      $A40                              ; Target -15 volts supply voltage
665       Y:0024 Y:0024         K_M15     DC      $080                              ; Tolerance of -15 volts supply voltage
666       Y:0025 Y:0025         I_HV      DC      0                                 ; Initial value of HV
667       Y:0026 Y:0026         I_P15     DC      0                                 ; Initial value of +15 volts
668       Y:0027 Y:0027         I_M15     DC      0                                 ; Initial value of -15 volts
669    
670                             ; Define some command names
671       Y:0028 Y:0028         CLR       DC      'CLR'                             ; Clear CCD
672       Y:0029 Y:0029         RDC       DC      'RDC'                             ; Readout CCD
673       Y:002A Y:002A         ABR       DC      'ABR'                             ; Abort readout
674       Y:002B Y:002B         OSH       DC      'OSH'                             ; Open shutter connected to timing board
675       Y:002C Y:002C         CSH       DC      'CSH'                             ; Close shutter connected to timing board
676       Y:002D Y:002D         POK       DC      'POK'                             ; Message to host - power in OK
677       Y:002E Y:002E         PER       DC      'PER'                             ; Message to host - ERROR in power up sequence
678       Y:002F Y:002F         SBV       DC      'SBV'                             ; Message to timing - set bias voltages
679       Y:0030 Y:0030         IDL       DC      'IDL'                             ; Message to timing - put camera in idle mode
680       Y:0031 Y:0031         STP       DC      'STP'                             ; Message to timing - Stop idling
681       Y:0032 Y:0032         NCL       DC      'NCL'                             ; Message to timing - Don't clear the CCD before
 an Exposure
682       Y:0033 Y:0033         DTH       DC      'DTH'                             ; Message to Timing - Dither ccd charge
683    
684                             ; Miscellaneous
685                             ; Heater value has been pegged to the limit given the current limiting resistors
686                             ; as of 2008 Aug 05
687    
688       Y:0034 Y:0034         CC00      DC      $FFF                              ; Maximum heater voltage so the board doesn't bu
rn up
Motorola DSP56000 Assembler  Version 6.2.0   111-08-09  12:42:28  utilappl.s  Page 13



689                             ;CC00   DC      $C00    ; Maximum heater voltage so the board doesn't burn up
690                             ;CC00   DC      $000            ; Set different max
691       Y:0035 Y:0035         SV_A1     DC      0                                 ; Save register A1 during analog processing
692       Y:0036 Y:0036         SV_SR     DC      0                                 ; Save status register during timer processing
693                              EL_TIM_FRACTION
694       Y:0037 Y:0037                   DC      0                                 ; Fraction of a millisecond of elapsed exposure 
time
695       Y:0038 Y:0038         INCR      DC      $CCCCCC                           ; Exposure time increment = 0.8 milliseconds
696       Y:0039 Y:0039         SH_DEL    DC      0                                 ; Shutter closing time.  No shutter in kepler sy
stem
697       Y:003A Y:003A         TEMP      DC      0                                 ; Temporary storage location for X:PBD word
698       Y:003B Y:003B         DAC1_LS   DC      0                                 ; Least significant part of heater voltage
699       Y:003C Y:003C         TGT_PIC   DC      1                                 ; Target number of pix in series.  Set by bashin
g
700       Y:003D Y:003D         NUMPIC    DC      0                                 ; Number of pix taken so far in this series
701       Y:003E Y:003E         T_COUNT   DC      0                                 ; Number of temp samples this integration
702       Y:003F Y:003F         T_SUM     DC      0                                 ; Running sum of temps
703       Y:0040 Y:0040         T_AVG     DC      0                                 ; Average temp from last integration
704       Y:0041 Y:0041         TH_COUNT  DC      0                                 ; Number of temp samples this integration
705       Y:0042 Y:0042         TH_SUM    DC      0                                 ; Running sum of temps
706       Y:0043 Y:0043         TH_AVG    DC      0                                 ; Average temp from last integration
707       Y:0044 Y:0044         ONE_K     DC      1024                              ; Number of samples in the integration, pwr of 2
708       Y:0045 Y:0045         WRDAC0    DC      0                                 ; DAC0 Voltage
709       Y:0046 Y:0046         WRDAC1    DC      0                                 ; DAC1 Voltage
710       Y:0047 Y:0047         WRDAC2    DC      0                                 ; DAC2 Voltage
711       Y:0048 Y:0048         WRDAC3    DC      0                                 ; DAC3 Voltage
712       Y:0049 Y:0049         DSP_VERS  DC      VERSION                           ; code version  This must remain at locn $49!!
713    
714                             ; During the downloading of this application program the one millisecond
715                             ;   timer interrupts are enabled, so the utility board will attempt to execute
716                             ;   the partially downloaded TIMER routine, and crash. A workaround is to
717                             ;   put a RTI as the first instruction of TIMER so it doesn't execute, then
718                             ;   write the correct instruction only after all the rest of the application
719                             ;   program has been downloaded. Here it is -
720    
721       P:0091 P:0091                   ORG     P:APL_ADR+1,P:APL_ADR+1
722       P:0091 P:0091 053679  TIMER1    MOVEC                         SR,Y:<SV_SR ; Save Status Register
723    
724    
725                                ENDSEC                                    ; End of SECTION UTILAPPL
726    
727                      ; End of program
728                                END

0    Errors
0    Warnings


